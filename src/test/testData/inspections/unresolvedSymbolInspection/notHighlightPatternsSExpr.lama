-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
  case i of
      READ      -> sprintf("READ")
    | WRITE     -> sprintf("WRITE")
    | BINOP (s) -> sprintf("BINOP %s", s)
    | LD    (x) -> sprintf("LD %s", x)
    | ST    (x) -> sprintf("ST %s", x)
    | CONST (n) -> sprintf("CONST %d", n)
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval(c, insns) {
  foldl(evalIns, c, getBuffer(insns))
}

fun evalIns(c@[stack, st, world], insn) {
  case insn of
    READ -> case <error descr="Symbol 'readWorld' is unresolved">readWorld</error>(world) of
      [v, newWorld] -> [v:stack, st, newWorld]
    esac
    | WRITE -> case stack of
      v : tail -> [tail, st, <error descr="Symbol 'writeWorld' is unresolved">writeWorld</error>(v, world)]
    esac
    | BINOP (op) -> case stack of
      v1 : v2 : tail -> [<error descr="Symbol 'evalBinop' is unresolved">evalBinop</error>(op, v2, v1):tail, st, world]
    esac
    | LD    (name) -> [st(name):stack, st, world]
    | ST    (name) -> case stack of
      v : tail -> [tail, st <- [name, v], world]
    esac
    | CONST (int) -> [int:stack, st, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval([{}, <error descr="Symbol 'emptyState' is unresolved">emptyState</error>, <error descr="Symbol 'createWorld' is unresolved">createWorld</error>(input)], insns)[2].<error descr="Symbol 'getOutput' is unresolved">getOutput</error>
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr(expr) {
  case expr of
      Var (name)  -> singletonBuffer(LD(name))
    | Const (int) -> singletonBuffer(CONST(int))
    | Binop (opName, l, r) -> compileExpr(l) <+> compileExpr(r) <+ BINOP(opName)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  case stmt of
      Skip -> emptyBuffer()
    | Assn (name, expr)   -> compileExpr(expr) <+ ST(name)
    | Seq  (stmt1, stmt2) -> compileSM(stmt1) <+> compileSM(stmt2)
    | Read (name)  -> listBuffer({ READ, ST(name) })
    | Write (expr) -> compileExpr(expr) <+ WRITE
  esac
}
