[0] LamaFile:Huge.lama (-- Ostap.):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (tab)
2(3) element: LAMA_VARIABLE_DEFINITION (tab)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (hct)
4(5) element: LAMA_VARIABLE_DEFINITION (hct)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (restab)
6(7) element: LAMA_VARIABLE_DEFINITION (restab)
7(8) element: LAMA_BOOLEAN_LITERAL (false)
8(9) element: LAMA_IDENTIFIER_EXPRESSION (log)
9(10) element: LAMA_VARIABLE_DEFINITION (log = false)
10(11) element: LAMA_VARIABLE_DEFINITION_SERIES (var tab, hct, restab, log = false;)
11(12) element: LAMA_FUNCTION_DEFINITION (public fun logOn () {)
12(13) element: LAMA_FUNCTION_DEFINITION (public fun initOstap () {)
13(14) element: LAMA_FUNCTION_DEFINITION (public fun memo (f) {)
14(15) element: LAMA_FUNCTION_DEFINITION (public fun token (x) {)
15(16) element: LAMA_FUNCTION_DEFINITION (public fun loc (k) {)
16(17) element: LAMA_FUNCTION_DEFINITION (public fun eof (k) {)
17(18) element: LAMA_FUNCTION_DEFINITION (public fun empty (k) {)
18(19) element: LAMA_FUNCTION_DEFINITION (public fun alt (a, b) {)
19(20) element: LAMA_FUNCTION_DEFINITION (public fun seq (a, b) {)
20(21) element: LAMA_INFIX_OPERATOR_DEFINITION (public infixr |  before !! (a, b) {alt (a, b)})
21(22) element: LAMA_INFIX_OPERATOR_DEFINITION (public infixr |> after  |  (a, b) {seq (a, b)})
22(23) element: LAMA_INFIX_OPERATOR_DEFINITION (public infix @ at * (a, f) {)
23(24) element: LAMA_FUNCTION_DEFINITION (public fun lift (f) {)
24(25) element: LAMA_FUNCTION_DEFINITION (public fun bypass (f) {)
25(26) element: LAMA_FUNCTION_DEFINITION (public fun opt (a) {empty @ lift (None) | a @ fun (x) {Some (x)}})
26(27) element: LAMA_FUNCTION_DEFINITION (public fun rep0 (a) {)
27(28) element: LAMA_FUNCTION_DEFINITION (public fun rep (a) {)
28(29) element: LAMA_FUNCTION_DEFINITION (public fun listBy (item, sep) {)
29(30) element: LAMA_FUNCTION_DEFINITION (public fun list0By (item, sep) {)
30(31) element: LAMA_FUNCTION_DEFINITION (public fun list (item) {)
31(32) element: LAMA_FUNCTION_DEFINITION (public fun list0 (item) {)
32(33) element: LAMA_FUNCTION_DEFINITION (public fun observe (name, f) {)
33(34) element: LAMA_FUNCTION_DEFINITION (public fun showStream (name) {)
34(35) element: LAMA_FUNCTION_DEFINITION (fun createResult () {)
35(36) element: LAMA_FUNCTION_DEFINITION (fun k (acc) {)
36(37) element: LAMA_FUNCTION_DEFINITION (fun result (acc) {)
37(38) element: LAMA_FUNCTION_DEFINITION (public fun parse (p, m) {)
38(39) element: LAMA_FUNCTION_DEFINITION (public fun parseString (p, s) {)
39(40) element: LAMA_FUNCTION_DEFINITION (public fun left (op, f) {)
40(41) element: LAMA_FUNCTION_DEFINITION (public fun right (op, f) {)
41(42) element: LAMA_FUNCTION_DEFINITION (fun altl (level) {)
42(43) element: LAMA_FUNCTION_DEFINITION (public fun expr (ops, opnd) {)
43(44) element: LAMA_IDENTIFIER_EXPRESSION (initOstap)
44(45) element: LAMA_ARGUMENT_LIST (())
45(46) element: LAMA_S_OR_CALL_EXPRESSION (initOstap ())
46(47) element: LAMA_EXPRESSION_SERIES (initOstap ())
47() element: null (<no_text>)

[1] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (logOn)
2(3) element: LAMA_PARAMETER_LIST (())
3(4) element: LAMA_SCOPE (log := true)
4(5) element: LAMA_FUNCTION_BODY ({)
5() element: null (<no_text>)

[2] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_ASSIGNMENT_OPERATOR (:=)
2(3) element: LAMA_BOOLEAN_LITERAL (true)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (log)
4(5) element: LAMA_ASSIGNMENT_EXPRESSION (log := true)
5(6) element: LAMA_EXPRESSION_SERIES (log := true)
6() element: null (<no_text>)

[3] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (initOstap)
2(3) element: LAMA_PARAMETER_LIST (())
3(4) element: LAMA_SCOPE (tab    := ref (emptyHashTab (1024, hash, compare));)
4(5) element: LAMA_FUNCTION_BODY ({)
5() element: null (<no_text>)

[4] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_ASSIGNMENT_OPERATOR (:=)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (ref)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (emptyHashTab)
4(5) element: LAMA_NUMERIC_LITERAL (1024)
5(6) element: LAMA_EXPRESSION_SERIES (1024)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (hash)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (hash)
8(9) element: LAMA_EXPRESSION_SERIES (hash)
9(10) element: LAMA_IDENTIFIER_EXPRESSION (compare)
10(11) element: LAMA_S_OR_CALL_EXPRESSION (compare)
11(12) element: LAMA_EXPRESSION_SERIES (compare)
12(13) element: LAMA_ARGUMENT_LIST ((1024, hash, compare))
13(14) element: LAMA_S_OR_CALL_EXPRESSION (emptyHashTab (1024, hash, compare))
14(15) element: LAMA_EXPRESSION_SERIES (emptyHashTab (1024, hash, compare))
15(16) element: LAMA_ARGUMENT_LIST ((emptyHashTab (1024, hash, compare)))
16(17) element: LAMA_S_OR_CALL_EXPRESSION (ref (emptyHashTab (1024, hash, compare)))
17(18) element: LAMA_IDENTIFIER_EXPRESSION (tab)
18(19) element: LAMA_ASSIGNMENT_EXPRESSION (tab    := ref (emptyHashTab (1024, hash, compare)))
19(20) element: LAMA_ASSIGNMENT_OPERATOR (:=)
20(21) element: LAMA_IDENTIFIER_EXPRESSION (emptyCustomMemo)
21(22) element: LAMA_FUNCTION_EXPRESSION (fun (x) {case x of #str -> true | _ -> false esac})
22(23) element: LAMA_EXPRESSION_SERIES (fun (x) {case x of #str -> true | _ -> false esac})
23(24) element: LAMA_IDENTIFIER_EXPRESSION (compare)
24(25) element: LAMA_S_OR_CALL_EXPRESSION (compare)
25(26) element: LAMA_EXPRESSION_SERIES (compare)
26(27) element: LAMA_ARGUMENT_LIST ((fun (x) {case x of #str -> true | _ -> false esac}, compare))
27(28) element: LAMA_S_OR_CALL_EXPRESSION (emptyCustomMemo (fun (x) {case x of #str -> true | _ -> false esac}, compare))
28(29) element: LAMA_IDENTIFIER_EXPRESSION (restab)
29(30) element: LAMA_ASSIGNMENT_EXPRESSION (restab := emptyCustomMemo (fun (x) {case x of #str -> true | _ -> false esac}, compare))
30(31) element: LAMA_ASSIGNMENT_OPERATOR (:=)
31(32) element: LAMA_IDENTIFIER_EXPRESSION (emptyMemo)
32(33) element: LAMA_ARGUMENT_LIST (())
33(34) element: LAMA_S_OR_CALL_EXPRESSION (emptyMemo ())
34(35) element: LAMA_IDENTIFIER_EXPRESSION (hct)
35(36) element: LAMA_ASSIGNMENT_EXPRESSION (hct    := emptyMemo ())
36(37) element: LAMA_EXPRESSION_SERIES (tab    := ref (emptyHashTab (1024, hash, compare));)
37() element: null (<no_text>)

[5] LAMA_EXPRESSION_SERIES (fun (x) {case x of #str -> true | _ -> false esac}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (x)
2(3) element: LAMA_S_OR_AT_PATTERN (x)
3(4) element: LAMA_PARAMETER_LIST ((x))
4(5) element: LAMA_SCOPE (case x of #str -> true | _ -> false esac)
5(6) element: LAMA_FUNCTION_BODY ({case x of #str -> true | _ -> false esac})
6() element: null (<no_text>)

[6] LAMA_FUNCTION_BODY ({case x of #str -> true | _ -> false esac}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (x)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (x)
3(4) element: LAMA_EXPRESSION_SERIES (x)
4(5) element: NULL_PSI_ELEMENT (<Fake element>)
5(6,7) element: LAMA_SHARP_PATTERN (#str)
6(7) element: LAMA_SCOPE (true)
7(8,12) element: LAMA_CASE_BRANCH (#str -> true)
8(9) element: NULL_PSI_ELEMENT (<Fake element>)
9(10,11) element: LAMA_WILDCARD_PATTERN (_)
10(11) element: LAMA_SCOPE (false)
11(12) element: LAMA_CASE_BRANCH (| _ -> false)
12(13) element: LAMA_CASE_STATEMENT (case x of #str -> true | _ -> false esac)
13(14) element: LAMA_EXPRESSION_SERIES (case x of #str -> true | _ -> false esac)
14() element: null (<no_text>)

[7] LAMA_CASE_BRANCH (#str -> true):
0(1) element: null (<no_text>)
1(2) element: LAMA_BOOLEAN_LITERAL (true)
2(3) element: LAMA_EXPRESSION_SERIES (true)
3() element: null (<no_text>)

[8] LAMA_CASE_BRANCH (| _ -> false):
0(1) element: null (<no_text>)
1(2) element: LAMA_BOOLEAN_LITERAL (false)
2(3) element: LAMA_EXPRESSION_SERIES (false)
3() element: null (<no_text>)

[9] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (memo)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (f)
3(4) element: LAMA_S_OR_AT_PATTERN (f)
4(5) element: LAMA_PARAMETER_LIST ((f))
5(6) element: LAMA_SCOPE (f := lookupMemo (hct, f);)
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[10] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_ASSIGNMENT_OPERATOR (:=)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (lookupMemo)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (hct)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (hct)
5(6) element: LAMA_EXPRESSION_SERIES (hct)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (f)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (f)
8(9) element: LAMA_EXPRESSION_SERIES (f)
9(10) element: LAMA_ARGUMENT_LIST ((hct, f))
10(11) element: LAMA_S_OR_CALL_EXPRESSION (lookupMemo (hct, f))
11(12) element: LAMA_IDENTIFIER_EXPRESSION (f)
12(13) element: LAMA_ASSIGNMENT_EXPRESSION (f := lookupMemo (hct, f))
13(14) element: LAMA_IDENTIFIER_EXPRESSION (log)
14(15) element: LAMA_S_OR_CALL_EXPRESSION (log)
15(16,17) element: LAMA_EXPRESSION_SERIES (log)
16(17) element: LAMA_SCOPE (printf ("Memoizing %x=%s\n", f, f.string))
17(18) element: LAMA_IF_BRANCH (then printf ("Memoizing %x=%s\n", f, f.string))
18(19) element: LAMA_IF_STATEMENT (if log then printf ("Memoizing %x=%s\n", f, f.string) fi)
19(20) element: LAMA_IDENTIFIER_EXPRESSION (findHashTab)
20(21) element: LAMA_IDENTIFIER_EXPRESSION (deref)
21(22) element: LAMA_IDENTIFIER_EXPRESSION (tab)
22(23) element: LAMA_S_OR_CALL_EXPRESSION (tab)
23(24) element: LAMA_EXPRESSION_SERIES (tab)
24(25) element: LAMA_ARGUMENT_LIST ((tab))
25(26) element: LAMA_S_OR_CALL_EXPRESSION (deref (tab))
26(27) element: LAMA_EXPRESSION_SERIES (deref (tab))
27(28) element: LAMA_IDENTIFIER_EXPRESSION (f)
28(29) element: LAMA_S_OR_CALL_EXPRESSION (f)
29(30) element: LAMA_EXPRESSION_SERIES (f)
30(31) element: LAMA_ARGUMENT_LIST ((deref (tab), f))
31(32) element: LAMA_S_OR_CALL_EXPRESSION (findHashTab (deref (tab), f))
32(33) element: LAMA_EXPRESSION_SERIES (findHashTab (deref (tab), f))
33(34) element: NULL_PSI_ELEMENT (<Fake element>)
34(35) element: LAMA_IDENTIFIER_EXPRESSION (None)
35(36,37) element: LAMA_S_OR_AT_PATTERN (None)
36(37) element: LAMA_SCOPE (if log then printf ("new table...\n") fi;)
37(38,45) element: LAMA_CASE_BRANCH (None      -> if log then printf ("new table...\n") fi;)
38(39) element: NULL_PSI_ELEMENT (<Fake element>)
39(40) element: LAMA_IDENTIFIER_EXPRESSION (Some)
40(41) element: LAMA_IDENTIFIER_EXPRESSION (tt)
41(42) element: LAMA_S_OR_AT_PATTERN (tt)
42(43,44) element: LAMA_S_OR_AT_PATTERN (Some (tt))
43(44) element: LAMA_SCOPE (skip)
44(45) element: LAMA_CASE_BRANCH (| Some (tt) -> skip)
45(46) element: LAMA_CASE_STATEMENT (case findHashTab (deref (tab), f) of)
46(47) element: LAMA_FUNCTION_EXPRESSION (fun (k) {)
47(48) element: LAMA_EXPRESSION_SERIES (f := lookupMemo (hct, f);)
48() element: null (<no_text>)

[11] LAMA_IF_BRANCH (then printf ("Memoizing %x=%s\n", f, f.string)):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (printf)
2(3) element: LAMA_STRING_LITERAL ("Memoizing %x=%s\n")
3(4) element: LAMA_EXPRESSION_SERIES ("Memoizing %x=%s\n")
4(5) element: LAMA_IDENTIFIER_EXPRESSION (f)
5(6) element: LAMA_S_OR_CALL_EXPRESSION (f)
6(7) element: LAMA_EXPRESSION_SERIES (f)
7(8) element: LAMA_DOT_OPERATOR (.)
8(9) element: LAMA_IDENTIFIER_EXPRESSION (f)
9(10) element: LAMA_IDENTIFIER_EXPRESSION (string)
10(11) element: LAMA_S_OR_CALL_EXPRESSION (string)
11(12) element: LAMA_OPERATOR_EXPRESSION (f.string)
12(13) element: LAMA_EXPRESSION_SERIES (f.string)
13(14) element: LAMA_ARGUMENT_LIST (("Memoizing %x=%s\n", f, f.string))
14(15) element: LAMA_S_OR_CALL_EXPRESSION (printf ("Memoizing %x=%s\n", f, f.string))
15(16) element: LAMA_EXPRESSION_SERIES (printf ("Memoizing %x=%s\n", f, f.string))
16() element: null (<no_text>)

[12] LAMA_CASE_BRANCH (None      -> if log then printf ("new table...\n") fi;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (log)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (log)
3(4,5) element: LAMA_EXPRESSION_SERIES (log)
4(5) element: LAMA_SCOPE (printf ("new table...\n"))
5(6) element: LAMA_IF_BRANCH (then printf ("new table...\n"))
6(7) element: LAMA_IF_STATEMENT (if log then printf ("new table...\n") fi)
7(8) element: LAMA_INFIX_OPERATOR (::=)
8(9) element: LAMA_IDENTIFIER_EXPRESSION (tab)
9(10) element: LAMA_IDENTIFIER_EXPRESSION (addHashTab)
10(11) element: LAMA_IDENTIFIER_EXPRESSION (deref)
11(12) element: LAMA_IDENTIFIER_EXPRESSION (tab)
12(13) element: LAMA_S_OR_CALL_EXPRESSION (tab)
13(14) element: LAMA_EXPRESSION_SERIES (tab)
14(15) element: LAMA_ARGUMENT_LIST ((tab))
15(16) element: LAMA_S_OR_CALL_EXPRESSION (deref (tab))
16(17) element: LAMA_EXPRESSION_SERIES (deref (tab))
17(18) element: LAMA_IDENTIFIER_EXPRESSION (f)
18(19) element: LAMA_S_OR_CALL_EXPRESSION (f)
19(20) element: LAMA_EXPRESSION_SERIES (f)
20(21) element: LAMA_IDENTIFIER_EXPRESSION (ref)
21(22) element: LAMA_IDENTIFIER_EXPRESSION (emptyMap)
22(23) element: LAMA_IDENTIFIER_EXPRESSION (compare)
23(24) element: LAMA_S_OR_CALL_EXPRESSION (compare)
24(25) element: LAMA_EXPRESSION_SERIES (compare)
25(26) element: LAMA_ARGUMENT_LIST ((compare))
26(27) element: LAMA_S_OR_CALL_EXPRESSION (emptyMap (compare))
27(28) element: LAMA_EXPRESSION_SERIES (emptyMap (compare))
28(29) element: LAMA_ARGUMENT_LIST ((emptyMap (compare)))
29(30) element: LAMA_S_OR_CALL_EXPRESSION (ref (emptyMap (compare)))
30(31) element: LAMA_EXPRESSION_SERIES (ref (emptyMap (compare)))
31(32) element: LAMA_ARGUMENT_LIST ((deref (tab), f, ref (emptyMap (compare))))
32(33) element: LAMA_S_OR_CALL_EXPRESSION (addHashTab (deref (tab), f, ref (emptyMap (compare))))
33(34) element: LAMA_OPERATOR_EXPRESSION (tab ::= addHashTab (deref (tab), f, ref (emptyMap (compare))))
34(35) element: LAMA_EXPRESSION_SERIES (if log then printf ("new table...\n") fi;)
35() element: null (<no_text>)

[13] LAMA_IF_BRANCH (then printf ("new table...\n")):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (printf)
2(3) element: LAMA_STRING_LITERAL ("new table...\n")
3(4) element: LAMA_EXPRESSION_SERIES ("new table...\n")
4(5) element: LAMA_ARGUMENT_LIST (("new table...\n"))
5(6) element: LAMA_S_OR_CALL_EXPRESSION (printf ("new table...\n"))
6(7) element: LAMA_EXPRESSION_SERIES (printf ("new table...\n"))
7() element: null (<no_text>)

[14] LAMA_CASE_BRANCH (| Some (tt) -> skip):
0(1) element: null (<no_text>)
1(2) element: LAMA_SKIP_EXPRESSION (skip)
2(3) element: LAMA_EXPRESSION_SERIES (skip)
3() element: null (<no_text>)

[15] LAMA_EXPRESSION_SERIES (f := lookupMemo (hct, f);):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_S_OR_AT_PATTERN (k)
3(4) element: LAMA_PARAMETER_LIST ((k))
4(5) element: LAMA_SCOPE (fun (s) {)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[16] LAMA_EXPRESSION_SERIES (fun (s) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (s)
2(3) element: LAMA_S_OR_AT_PATTERN (s)
3(4) element: LAMA_PARAMETER_LIST ((s))
4(5) element: LAMA_SCOPE (var t =)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[17] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (s) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (s) {)
3() element: null (<no_text>)

[18] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (findHashTab)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (deref)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (tab)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (tab)
5(6) element: LAMA_EXPRESSION_SERIES (tab)
6(7) element: LAMA_ARGUMENT_LIST ((tab))
7(8) element: LAMA_S_OR_CALL_EXPRESSION (deref (tab))
8(9) element: LAMA_EXPRESSION_SERIES (deref (tab))
9(10) element: LAMA_IDENTIFIER_EXPRESSION (f)
10(11) element: LAMA_S_OR_CALL_EXPRESSION (f)
11(12) element: LAMA_EXPRESSION_SERIES (f)
12(13) element: LAMA_ARGUMENT_LIST ((deref (tab), f))
13(14) element: LAMA_S_OR_CALL_EXPRESSION (findHashTab (deref (tab), f))
14(15) element: LAMA_EXPRESSION_SERIES (findHashTab (deref (tab), f))
15(16) element: NULL_PSI_ELEMENT (<Fake element>)
16(17) element: LAMA_IDENTIFIER_EXPRESSION (Some)
17(18) element: LAMA_IDENTIFIER_EXPRESSION (t)
18(19) element: LAMA_S_OR_AT_PATTERN (t)
19(20,21) element: LAMA_S_OR_AT_PATTERN (Some (t))
20(21) element: LAMA_SCOPE (t)
21(22) element: LAMA_CASE_BRANCH (Some (t) -> t)
22(23) element: LAMA_CASE_STATEMENT (case findHashTab (deref (tab), f) of)
23(24) element: LAMA_IDENTIFIER_EXPRESSION (t)
24(25) element: LAMA_VARIABLE_DEFINITION (t =)
25(26) element: LAMA_VARIABLE_DEFINITION_SERIES (var t =)
26(27) element: LAMA_IDENTIFIER_EXPRESSION (log)
27(28) element: LAMA_S_OR_CALL_EXPRESSION (log)
28(29,30) element: LAMA_EXPRESSION_SERIES (log)
29(30) element: LAMA_SCOPE (printf ("Applying memoized parser to %s\n", s.string))
30(31) element: LAMA_IF_BRANCH (then printf ("Applying memoized parser to %s\n", s.string))
31(32) element: LAMA_IF_STATEMENT (if log then printf ("Applying memoized parser to %s\n", s.string) fi)
32(33) element: LAMA_IDENTIFIER_EXPRESSION (findMap)
33(34) element: LAMA_IDENTIFIER_EXPRESSION (deref)
34(35) element: LAMA_IDENTIFIER_EXPRESSION (t)
35(36) element: LAMA_S_OR_CALL_EXPRESSION (t)
36(37) element: LAMA_EXPRESSION_SERIES (t)
37(38) element: LAMA_ARGUMENT_LIST ((t))
38(39) element: LAMA_S_OR_CALL_EXPRESSION (deref (t))
39(40) element: LAMA_EXPRESSION_SERIES (deref (t))
40(41) element: LAMA_IDENTIFIER_EXPRESSION (s)
41(42) element: LAMA_S_OR_CALL_EXPRESSION (s)
42(43) element: LAMA_EXPRESSION_SERIES (s)
43(44) element: LAMA_ARGUMENT_LIST ((deref (t), s))
44(45) element: LAMA_S_OR_CALL_EXPRESSION (findMap (deref (t), s))
45(46) element: LAMA_EXPRESSION_SERIES (findMap (deref (t), s))
46(47) element: NULL_PSI_ELEMENT (<Fake element>)
47(48) element: LAMA_IDENTIFIER_EXPRESSION (None)
48(49,50) element: LAMA_S_OR_AT_PATTERN (None)
49(50) element: LAMA_SCOPE (t ::= addMap (deref (t), s, [addSet (emptySet (compare), k), emptySet (fun (r1, r2) {)
50(51,61) element: LAMA_CASE_BRANCH (None  ->)
51(52) element: NULL_PSI_ELEMENT (<Fake element>)
52(53) element: LAMA_IDENTIFIER_EXPRESSION (Some)
53(54) element: LAMA_IDENTIFIER_EXPRESSION (ks)
54(55) element: LAMA_S_OR_AT_PATTERN (ks)
55(56) element: LAMA_IDENTIFIER_EXPRESSION (rs)
56(57) element: LAMA_S_OR_AT_PATTERN (rs)
57(58) element: LAMA_ARRAY_PATTERN ([ks, rs])
58(59,60) element: LAMA_S_OR_AT_PATTERN (Some ([ks, rs]))
59(60) element: LAMA_SCOPE (t ::= addMap (deref (t), s, [addSet (ks, k), rs]);)
60(61) element: LAMA_CASE_BRANCH (| Some ([ks, rs]) ->)
61(62) element: LAMA_CASE_STATEMENT (case findMap (deref (t), s) of)
62(63) element: LAMA_EXPRESSION_SERIES (if log then printf ("Applying memoized parser to %s\n", s.string) fi;)
63() element: null (<no_text>)

[19] LAMA_CASE_BRANCH (Some (t) -> t):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (t)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (t)
3(4) element: LAMA_EXPRESSION_SERIES (t)
4() element: null (<no_text>)

[20] LAMA_IF_BRANCH (then printf ("Applying memoized parser to %s\n", s.string)):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (printf)
2(3) element: LAMA_STRING_LITERAL ("Applying memoized parser to %s\n")
3(4) element: LAMA_EXPRESSION_SERIES ("Applying memoized parser to %s\n")
4(5) element: LAMA_DOT_OPERATOR (.)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (s)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (string)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (string)
8(9) element: LAMA_OPERATOR_EXPRESSION (s.string)
9(10) element: LAMA_EXPRESSION_SERIES (s.string)
10(11) element: LAMA_ARGUMENT_LIST (("Applying memoized parser to %s\n", s.string))
11(12) element: LAMA_S_OR_CALL_EXPRESSION (printf ("Applying memoized parser to %s\n", s.string))
12(13) element: LAMA_EXPRESSION_SERIES (printf ("Applying memoized parser to %s\n", s.string))
13() element: null (<no_text>)

[21] LAMA_CASE_BRANCH (None  ->):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (::=)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (t)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (addMap)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (deref)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (t)
6(7) element: LAMA_S_OR_CALL_EXPRESSION (t)
7(8) element: LAMA_EXPRESSION_SERIES (t)
8(9) element: LAMA_ARGUMENT_LIST ((t))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (deref (t))
10(11) element: LAMA_EXPRESSION_SERIES (deref (t))
11(12) element: LAMA_IDENTIFIER_EXPRESSION (s)
12(13) element: LAMA_S_OR_CALL_EXPRESSION (s)
13(14) element: LAMA_EXPRESSION_SERIES (s)
14(15) element: LAMA_IDENTIFIER_EXPRESSION (addSet)
15(16) element: LAMA_IDENTIFIER_EXPRESSION (emptySet)
16(17) element: LAMA_IDENTIFIER_EXPRESSION (compare)
17(18) element: LAMA_S_OR_CALL_EXPRESSION (compare)
18(19) element: LAMA_EXPRESSION_SERIES (compare)
19(20) element: LAMA_ARGUMENT_LIST ((compare))
20(21) element: LAMA_S_OR_CALL_EXPRESSION (emptySet (compare))
21(22) element: LAMA_EXPRESSION_SERIES (emptySet (compare))
22(23) element: LAMA_IDENTIFIER_EXPRESSION (k)
23(24) element: LAMA_S_OR_CALL_EXPRESSION (k)
24(25) element: LAMA_EXPRESSION_SERIES (k)
25(26) element: LAMA_ARGUMENT_LIST ((emptySet (compare), k))
26(27) element: LAMA_S_OR_CALL_EXPRESSION (addSet (emptySet (compare), k))
27(28) element: LAMA_EXPRESSION_SERIES (addSet (emptySet (compare), k))
28(29) element: LAMA_IDENTIFIER_EXPRESSION (emptySet)
29(30) element: LAMA_FUNCTION_EXPRESSION (fun (r1, r2) {)
30(31) element: LAMA_EXPRESSION_SERIES (fun (r1, r2) {)
31(32) element: LAMA_ARGUMENT_LIST ((fun (r1, r2) {)
32(33) element: LAMA_S_OR_CALL_EXPRESSION (emptySet (fun (r1, r2) {)
33(34) element: LAMA_EXPRESSION_SERIES (emptySet (fun (r1, r2) {)
34(35) element: LAMA_ARRAY_EXPRESSION ([addSet (emptySet (compare), k), emptySet (fun (r1, r2) {)
35(36) element: LAMA_EXPRESSION_SERIES ([addSet (emptySet (compare), k), emptySet (fun (r1, r2) {)
36(37) element: LAMA_ARGUMENT_LIST ((deref (t), s, [addSet (emptySet (compare), k), emptySet (fun (r1, r2) {)
37(38) element: LAMA_S_OR_CALL_EXPRESSION (addMap (deref (t), s, [addSet (emptySet (compare), k), emptySet (fun (r1, r2) {)
38(39) element: LAMA_OPERATOR_EXPRESSION (t ::= addMap (deref (t), s, [addSet (emptySet (compare), k), emptySet (fun (r1, r2) {)
39(40) element: LAMA_IDENTIFIER_EXPRESSION (f)
40(41) element: LAMA_FUNCTION_EXPRESSION (fun (r) {)
41(42) element: LAMA_EXPRESSION_SERIES (fun (r) {)
42(43) element: LAMA_ARGUMENT_LIST ((fun (r) {)
43(44) element: LAMA_S_OR_CALL_EXPRESSION (f (fun (r) {)
44(45) element: LAMA_IDENTIFIER_EXPRESSION (s)
45(46) element: LAMA_S_OR_CALL_EXPRESSION (s)
46(47) element: LAMA_EXPRESSION_SERIES (s)
47(48) element: LAMA_ARGUMENT_LIST ((s))
48(49) element: LAMA_S_OR_CALL_EXPRESSION (f (fun (r) {)
49(50) element: LAMA_EXPRESSION_SERIES (t ::= addMap (deref (t), s, [addSet (emptySet (compare), k), emptySet (fun (r1, r2) {)
50() element: null (<no_text>)

[22] LAMA_EXPRESSION_SERIES (fun (r1, r2) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (r1)
2(3) element: LAMA_S_OR_AT_PATTERN (r1)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (r2)
4(5) element: LAMA_S_OR_AT_PATTERN (r2)
5(6) element: LAMA_PARAMETER_LIST ((r1, r2))
6(7) element: LAMA_SCOPE (case [r1, r2] of)
7(8) element: LAMA_FUNCTION_BODY ({)
8() element: null (<no_text>)

[23] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (r1)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (r1)
3(4) element: LAMA_EXPRESSION_SERIES (r1)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (r2)
5(6) element: LAMA_S_OR_CALL_EXPRESSION (r2)
6(7) element: LAMA_EXPRESSION_SERIES (r2)
7(8) element: LAMA_ARRAY_EXPRESSION ([r1, r2])
8(9) element: LAMA_EXPRESSION_SERIES ([r1, r2])
9(10) element: NULL_PSI_ELEMENT (<Fake element>)
10(11) element: LAMA_IDENTIFIER_EXPRESSION (Fail)
11(12) element: LAMA_WILDCARD_PATTERN (_)
12(13) element: LAMA_WILDCARD_PATTERN (_)
13(14) element: LAMA_WILDCARD_PATTERN (_)
14(15) element: LAMA_S_OR_AT_PATTERN (Fail (_, _, _))
15(16) element: LAMA_IDENTIFIER_EXPRESSION (Fail)
16(17) element: LAMA_WILDCARD_PATTERN (_)
17(18) element: LAMA_WILDCARD_PATTERN (_)
18(19) element: LAMA_WILDCARD_PATTERN (_)
19(20) element: LAMA_S_OR_AT_PATTERN (Fail (_, _, _))
20(21,22) element: LAMA_ARRAY_PATTERN ([Fail (_, _, _), Fail (_, _, _)])
21(22) element: LAMA_SCOPE (0)
22(23,27) element: LAMA_CASE_BRANCH ([Fail (_, _, _), Fail (_, _, _)] -> 0)
23(24) element: NULL_PSI_ELEMENT (<Fake element>)
24(25,26) element: LAMA_WILDCARD_PATTERN (_)
25(26) element: LAMA_SCOPE (compare (r1, r2))
26(27) element: LAMA_CASE_BRANCH (| _                                -> compare (r1, r2))
27(28) element: LAMA_CASE_STATEMENT (case [r1, r2] of)
28(29) element: LAMA_EXPRESSION_SERIES (case [r1, r2] of)
29() element: null (<no_text>)

[24] LAMA_CASE_BRANCH ([Fail (_, _, _), Fail (_, _, _)] -> 0):
0(1) element: null (<no_text>)
1(2) element: LAMA_NUMERIC_LITERAL (0)
2(3) element: LAMA_EXPRESSION_SERIES (0)
3() element: null (<no_text>)

[25] LAMA_CASE_BRANCH (| _                                -> compare (r1, r2)):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (compare)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (r1)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (r1)
4(5) element: LAMA_EXPRESSION_SERIES (r1)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (r2)
6(7) element: LAMA_S_OR_CALL_EXPRESSION (r2)
7(8) element: LAMA_EXPRESSION_SERIES (r2)
8(9) element: LAMA_ARGUMENT_LIST ((r1, r2))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (compare (r1, r2))
10(11) element: LAMA_EXPRESSION_SERIES (compare (r1, r2))
11() element: null (<no_text>)

[26] LAMA_EXPRESSION_SERIES (fun (r) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (r)
2(3) element: LAMA_S_OR_AT_PATTERN (r)
3(4) element: LAMA_PARAMETER_LIST ((r))
4(5) element: LAMA_SCOPE (r := lookupMemo (restab, r);)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[27] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_ASSIGNMENT_OPERATOR (:=)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (lookupMemo)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (restab)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (restab)
5(6) element: LAMA_EXPRESSION_SERIES (restab)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (r)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (r)
8(9) element: LAMA_EXPRESSION_SERIES (r)
9(10) element: LAMA_ARGUMENT_LIST ((restab, r))
10(11) element: LAMA_S_OR_CALL_EXPRESSION (lookupMemo (restab, r))
11(12) element: LAMA_IDENTIFIER_EXPRESSION (r)
12(13) element: LAMA_ASSIGNMENT_EXPRESSION (r := lookupMemo (restab, r))
13(14) element: LAMA_IDENTIFIER_EXPRESSION (log)
14(15) element: LAMA_S_OR_CALL_EXPRESSION (log)
15(16,17) element: LAMA_EXPRESSION_SERIES (log)
16(17) element: LAMA_SCOPE (printf ("Running continuation with result %s\n", r.string))
17(18) element: LAMA_IF_BRANCH (then printf ("Running continuation with result %s\n", r.string))
18(19) element: LAMA_IF_STATEMENT (if log then printf ("Running continuation with result %s\n", r.string) fi)
19(20) element: LAMA_IDENTIFIER_EXPRESSION (findMap)
20(21) element: LAMA_IDENTIFIER_EXPRESSION (deref)
21(22) element: LAMA_IDENTIFIER_EXPRESSION (t)
22(23) element: LAMA_S_OR_CALL_EXPRESSION (t)
23(24) element: LAMA_EXPRESSION_SERIES (t)
24(25) element: LAMA_ARGUMENT_LIST ((t))
25(26) element: LAMA_S_OR_CALL_EXPRESSION (deref (t))
26(27) element: LAMA_EXPRESSION_SERIES (deref (t))
27(28) element: LAMA_IDENTIFIER_EXPRESSION (s)
28(29) element: LAMA_S_OR_CALL_EXPRESSION (s)
29(30) element: LAMA_EXPRESSION_SERIES (s)
30(31) element: LAMA_ARGUMENT_LIST ((deref (t), s))
31(32) element: LAMA_S_OR_CALL_EXPRESSION (findMap (deref (t), s))
32(33) element: LAMA_EXPRESSION_SERIES (findMap (deref (t), s))
33(34) element: NULL_PSI_ELEMENT (<Fake element>)
34(35) element: LAMA_IDENTIFIER_EXPRESSION (Some)
35(36) element: LAMA_IDENTIFIER_EXPRESSION (ks)
36(37) element: LAMA_S_OR_AT_PATTERN (ks)
37(38) element: LAMA_IDENTIFIER_EXPRESSION (rs)
38(39) element: LAMA_S_OR_AT_PATTERN (rs)
39(40) element: LAMA_ARRAY_PATTERN ([ks, rs])
40(41,42) element: LAMA_S_OR_AT_PATTERN (Some ([ks, rs]))
41(42) element: LAMA_SCOPE (if memSet (rs, r))
42(43) element: LAMA_CASE_BRANCH (Some ([ks, rs]) ->)
43(44) element: LAMA_CASE_STATEMENT (case findMap (deref (t), s) of)
44(45) element: LAMA_EXPRESSION_SERIES (r := lookupMemo (restab, r);)
45() element: null (<no_text>)

[28] LAMA_IF_BRANCH (then printf ("Running continuation with result %s\n", r.string)):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (printf)
2(3) element: LAMA_STRING_LITERAL ("Running continuation with result %s\n")
3(4) element: LAMA_EXPRESSION_SERIES ("Running continuation with result %s\n")
4(5) element: LAMA_DOT_OPERATOR (.)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (r)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (string)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (string)
8(9) element: LAMA_OPERATOR_EXPRESSION (r.string)
9(10) element: LAMA_EXPRESSION_SERIES (r.string)
10(11) element: LAMA_ARGUMENT_LIST (("Running continuation with result %s\n", r.string))
11(12) element: LAMA_S_OR_CALL_EXPRESSION (printf ("Running continuation with result %s\n", r.string))
12(13) element: LAMA_EXPRESSION_SERIES (printf ("Running continuation with result %s\n", r.string))
13() element: null (<no_text>)

[29] LAMA_CASE_BRANCH (Some ([ks, rs]) ->):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (memSet)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (rs)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (rs)
4(5) element: LAMA_EXPRESSION_SERIES (rs)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (r)
6(7) element: LAMA_S_OR_CALL_EXPRESSION (r)
7(8) element: LAMA_EXPRESSION_SERIES (r)
8(9) element: LAMA_ARGUMENT_LIST ((rs, r))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (memSet (rs, r))
10(11,12) element: LAMA_EXPRESSION_SERIES (memSet (rs, r))
11(12) element: LAMA_SCOPE (skip)
12(13,15) element: LAMA_IF_BRANCH (then skip)
13(14) element: LAMA_SCOPE (t ::= addMap (deref (t), s, [ks, addSet (rs, r)]);)
14(15) element: LAMA_IF_BRANCH (else)
15(16) element: LAMA_IF_STATEMENT (if memSet (rs, r))
16(17) element: LAMA_EXPRESSION_SERIES (if memSet (rs, r))
17() element: null (<no_text>)

[30] LAMA_IF_BRANCH (then skip):
0(1) element: null (<no_text>)
1(2) element: LAMA_SKIP_EXPRESSION (skip)
2(3) element: LAMA_EXPRESSION_SERIES (skip)
3() element: null (<no_text>)

[31] LAMA_IF_BRANCH (else):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (::=)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (t)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (addMap)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (deref)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (t)
6(7) element: LAMA_S_OR_CALL_EXPRESSION (t)
7(8) element: LAMA_EXPRESSION_SERIES (t)
8(9) element: LAMA_ARGUMENT_LIST ((t))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (deref (t))
10(11) element: LAMA_EXPRESSION_SERIES (deref (t))
11(12) element: LAMA_IDENTIFIER_EXPRESSION (s)
12(13) element: LAMA_S_OR_CALL_EXPRESSION (s)
13(14) element: LAMA_EXPRESSION_SERIES (s)
14(15) element: LAMA_IDENTIFIER_EXPRESSION (ks)
15(16) element: LAMA_S_OR_CALL_EXPRESSION (ks)
16(17) element: LAMA_EXPRESSION_SERIES (ks)
17(18) element: LAMA_IDENTIFIER_EXPRESSION (addSet)
18(19) element: LAMA_IDENTIFIER_EXPRESSION (rs)
19(20) element: LAMA_S_OR_CALL_EXPRESSION (rs)
20(21) element: LAMA_EXPRESSION_SERIES (rs)
21(22) element: LAMA_IDENTIFIER_EXPRESSION (r)
22(23) element: LAMA_S_OR_CALL_EXPRESSION (r)
23(24) element: LAMA_EXPRESSION_SERIES (r)
24(25) element: LAMA_ARGUMENT_LIST ((rs, r))
25(26) element: LAMA_S_OR_CALL_EXPRESSION (addSet (rs, r))
26(27) element: LAMA_EXPRESSION_SERIES (addSet (rs, r))
27(28) element: LAMA_ARRAY_EXPRESSION ([ks, addSet (rs, r)])
28(29) element: LAMA_EXPRESSION_SERIES ([ks, addSet (rs, r)])
29(30) element: LAMA_ARGUMENT_LIST ((deref (t), s, [ks, addSet (rs, r)]))
30(31) element: LAMA_S_OR_CALL_EXPRESSION (addMap (deref (t), s, [ks, addSet (rs, r)]))
31(32) element: LAMA_OPERATOR_EXPRESSION (t ::= addMap (deref (t), s, [ks, addSet (rs, r)]))
32(33) element: LAMA_IDENTIFIER_EXPRESSION (iterSet)
33(34) element: LAMA_FUNCTION_EXPRESSION (fun (k) {k (r)})
34(35) element: LAMA_EXPRESSION_SERIES (fun (k) {k (r)})
35(36) element: LAMA_IDENTIFIER_EXPRESSION (ks)
36(37) element: LAMA_S_OR_CALL_EXPRESSION (ks)
37(38) element: LAMA_EXPRESSION_SERIES (ks)
38(39) element: LAMA_ARGUMENT_LIST ((fun (k) {k (r)}, ks))
39(40) element: LAMA_S_OR_CALL_EXPRESSION (iterSet (fun (k) {k (r)}, ks))
40(41) element: LAMA_EXPRESSION_SERIES (t ::= addMap (deref (t), s, [ks, addSet (rs, r)]);)
41() element: null (<no_text>)

[32] LAMA_EXPRESSION_SERIES (fun (k) {k (r)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_S_OR_AT_PATTERN (k)
3(4) element: LAMA_PARAMETER_LIST ((k))
4(5) element: LAMA_SCOPE (k (r))
5(6) element: LAMA_FUNCTION_BODY ({k (r)})
6() element: null (<no_text>)

[33] LAMA_FUNCTION_BODY ({k (r)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (r)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (r)
4(5) element: LAMA_EXPRESSION_SERIES (r)
5(6) element: LAMA_ARGUMENT_LIST ((r))
6(7) element: LAMA_S_OR_CALL_EXPRESSION (k (r))
7(8) element: LAMA_EXPRESSION_SERIES (k (r))
8() element: null (<no_text>)

[34] LAMA_CASE_BRANCH (| Some ([ks, rs]) ->):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (::=)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (t)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (addMap)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (deref)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (t)
6(7) element: LAMA_S_OR_CALL_EXPRESSION (t)
7(8) element: LAMA_EXPRESSION_SERIES (t)
8(9) element: LAMA_ARGUMENT_LIST ((t))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (deref (t))
10(11) element: LAMA_EXPRESSION_SERIES (deref (t))
11(12) element: LAMA_IDENTIFIER_EXPRESSION (s)
12(13) element: LAMA_S_OR_CALL_EXPRESSION (s)
13(14) element: LAMA_EXPRESSION_SERIES (s)
14(15) element: LAMA_IDENTIFIER_EXPRESSION (addSet)
15(16) element: LAMA_IDENTIFIER_EXPRESSION (ks)
16(17) element: LAMA_S_OR_CALL_EXPRESSION (ks)
17(18) element: LAMA_EXPRESSION_SERIES (ks)
18(19) element: LAMA_IDENTIFIER_EXPRESSION (k)
19(20) element: LAMA_S_OR_CALL_EXPRESSION (k)
20(21) element: LAMA_EXPRESSION_SERIES (k)
21(22) element: LAMA_ARGUMENT_LIST ((ks, k))
22(23) element: LAMA_S_OR_CALL_EXPRESSION (addSet (ks, k))
23(24) element: LAMA_EXPRESSION_SERIES (addSet (ks, k))
24(25) element: LAMA_IDENTIFIER_EXPRESSION (rs)
25(26) element: LAMA_S_OR_CALL_EXPRESSION (rs)
26(27) element: LAMA_EXPRESSION_SERIES (rs)
27(28) element: LAMA_ARRAY_EXPRESSION ([addSet (ks, k), rs])
28(29) element: LAMA_EXPRESSION_SERIES ([addSet (ks, k), rs])
29(30) element: LAMA_ARGUMENT_LIST ((deref (t), s, [addSet (ks, k), rs]))
30(31) element: LAMA_S_OR_CALL_EXPRESSION (addMap (deref (t), s, [addSet (ks, k), rs]))
31(32) element: LAMA_OPERATOR_EXPRESSION (t ::= addMap (deref (t), s, [addSet (ks, k), rs]))
32(33) element: LAMA_IDENTIFIER_EXPRESSION (iterSet)
33(34) element: LAMA_IDENTIFIER_EXPRESSION (k)
34(35) element: LAMA_S_OR_CALL_EXPRESSION (k)
35(36) element: LAMA_EXPRESSION_SERIES (k)
36(37) element: LAMA_IDENTIFIER_EXPRESSION (rs)
37(38) element: LAMA_S_OR_CALL_EXPRESSION (rs)
38(39) element: LAMA_EXPRESSION_SERIES (rs)
39(40) element: LAMA_ARGUMENT_LIST ((k, rs))
40(41) element: LAMA_S_OR_CALL_EXPRESSION (iterSet (k, rs))
41(42) element: LAMA_EXPRESSION_SERIES (t ::= addMap (deref (t), s, [addSet (ks, k), rs]);)
42() element: null (<no_text>)

[35] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (token)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (x)
3(4) element: LAMA_S_OR_AT_PATTERN (x)
4(5) element: LAMA_PARAMETER_LIST ((x))
5(6) element: LAMA_SCOPE (case x of)
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[36] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (x)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (x)
3(4) element: LAMA_EXPRESSION_SERIES (x)
4(5) element: NULL_PSI_ELEMENT (<Fake element>)
5(6,7) element: LAMA_SHARP_PATTERN (#str)
6(7) element: LAMA_SCOPE (memo $ fun (k) {fun (s) {k $ matchString (s, x)}})
7(8,12) element: LAMA_CASE_BRANCH (#str -> memo $ fun (k) {fun (s) {k $ matchString (s, x)}})
8(9) element: NULL_PSI_ELEMENT (<Fake element>)
9(10,11) element: LAMA_WILDCARD_PATTERN (_)
10(11) element: LAMA_SCOPE (memo $ fun (k) {fun (s) {k $ matchRegexp (s, x)}})
11(12) element: LAMA_CASE_BRANCH (| _    -> memo $ fun (k) {fun (s) {k $ matchRegexp (s, x)}})
12(13) element: LAMA_CASE_STATEMENT (case x of)
13(14) element: LAMA_EXPRESSION_SERIES (case x of)
14() element: null (<no_text>)

[37] LAMA_CASE_BRANCH (#str -> memo $ fun (k) {fun (s) {k $ matchString (s, x)}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR ($)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (memo)
3(4) element: LAMA_FUNCTION_EXPRESSION (fun (k) {fun (s) {k $ matchString (s, x)}})
4(5) element: LAMA_OPERATOR_EXPRESSION (memo $ fun (k) {fun (s) {k $ matchString (s, x)}})
5(6) element: LAMA_EXPRESSION_SERIES (memo $ fun (k) {fun (s) {k $ matchString (s, x)}})
6() element: null (<no_text>)

[38] LAMA_OPERATOR_EXPRESSION (memo $ fun (k) {fun (s) {k $ matchString (s, x)}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_S_OR_AT_PATTERN (k)
3(4) element: LAMA_PARAMETER_LIST ((k))
4(5) element: LAMA_SCOPE (fun (s) {k $ matchString (s, x)})
5(6) element: LAMA_FUNCTION_BODY ({fun (s) {k $ matchString (s, x)}})
6() element: null (<no_text>)

[39] LAMA_EXPRESSION_SERIES (fun (s) {k $ matchString (s, x)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (s)
2(3) element: LAMA_S_OR_AT_PATTERN (s)
3(4) element: LAMA_PARAMETER_LIST ((s))
4(5) element: LAMA_SCOPE (k $ matchString (s, x))
5(6) element: LAMA_FUNCTION_BODY ({k $ matchString (s, x)})
6() element: null (<no_text>)

[40] LAMA_FUNCTION_BODY ({fun (s) {k $ matchString (s, x)}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (s) {k $ matchString (s, x)})
2(3) element: LAMA_EXPRESSION_SERIES (fun (s) {k $ matchString (s, x)})
3() element: null (<no_text>)

[41] LAMA_FUNCTION_BODY ({k $ matchString (s, x)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR ($)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (k)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (matchString)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (s)
5(6) element: LAMA_S_OR_CALL_EXPRESSION (s)
6(7) element: LAMA_EXPRESSION_SERIES (s)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (x)
8(9) element: LAMA_S_OR_CALL_EXPRESSION (x)
9(10) element: LAMA_EXPRESSION_SERIES (x)
10(11) element: LAMA_ARGUMENT_LIST ((s, x))
11(12) element: LAMA_S_OR_CALL_EXPRESSION (matchString (s, x))
12(13) element: LAMA_OPERATOR_EXPRESSION (k $ matchString (s, x))
13(14) element: LAMA_EXPRESSION_SERIES (k $ matchString (s, x))
14() element: null (<no_text>)

[42] LAMA_CASE_BRANCH (| _    -> memo $ fun (k) {fun (s) {k $ matchRegexp (s, x)}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR ($)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (memo)
3(4) element: LAMA_FUNCTION_EXPRESSION (fun (k) {fun (s) {k $ matchRegexp (s, x)}})
4(5) element: LAMA_OPERATOR_EXPRESSION (memo $ fun (k) {fun (s) {k $ matchRegexp (s, x)}})
5(6) element: LAMA_EXPRESSION_SERIES (memo $ fun (k) {fun (s) {k $ matchRegexp (s, x)}})
6() element: null (<no_text>)

[43] LAMA_OPERATOR_EXPRESSION (memo $ fun (k) {fun (s) {k $ matchRegexp (s, x)}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_S_OR_AT_PATTERN (k)
3(4) element: LAMA_PARAMETER_LIST ((k))
4(5) element: LAMA_SCOPE (fun (s) {k $ matchRegexp (s, x)})
5(6) element: LAMA_FUNCTION_BODY ({fun (s) {k $ matchRegexp (s, x)}})
6() element: null (<no_text>)

[44] LAMA_EXPRESSION_SERIES (fun (s) {k $ matchRegexp (s, x)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (s)
2(3) element: LAMA_S_OR_AT_PATTERN (s)
3(4) element: LAMA_PARAMETER_LIST ((s))
4(5) element: LAMA_SCOPE (k $ matchRegexp (s, x))
5(6) element: LAMA_FUNCTION_BODY ({k $ matchRegexp (s, x)})
6() element: null (<no_text>)

[45] LAMA_FUNCTION_BODY ({fun (s) {k $ matchRegexp (s, x)}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (s) {k $ matchRegexp (s, x)})
2(3) element: LAMA_EXPRESSION_SERIES (fun (s) {k $ matchRegexp (s, x)})
3() element: null (<no_text>)

[46] LAMA_FUNCTION_BODY ({k $ matchRegexp (s, x)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR ($)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (k)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (matchRegexp)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (s)
5(6) element: LAMA_S_OR_CALL_EXPRESSION (s)
6(7) element: LAMA_EXPRESSION_SERIES (s)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (x)
8(9) element: LAMA_S_OR_CALL_EXPRESSION (x)
9(10) element: LAMA_EXPRESSION_SERIES (x)
10(11) element: LAMA_ARGUMENT_LIST ((s, x))
11(12) element: LAMA_S_OR_CALL_EXPRESSION (matchRegexp (s, x))
12(13) element: LAMA_OPERATOR_EXPRESSION (k $ matchRegexp (s, x))
13(14) element: LAMA_EXPRESSION_SERIES (k $ matchRegexp (s, x))
14() element: null (<no_text>)

[47] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (loc)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (k)
3(4) element: LAMA_S_OR_AT_PATTERN (k)
4(5) element: LAMA_PARAMETER_LIST ((k))
5(6) element: LAMA_SCOPE (fun (s) {)
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[48] LAMA_EXPRESSION_SERIES (fun (s) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (s)
2(3) element: LAMA_S_OR_AT_PATTERN (s)
3(4) element: LAMA_PARAMETER_LIST ((s))
4(5) element: LAMA_SCOPE (k $ Succ ([s.getLine, s.getCol], s))
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[49] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (s) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (s) {)
3() element: null (<no_text>)

[50] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR ($)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (k)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (Succ)
4(5) element: LAMA_DOT_OPERATOR (.)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (s)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (getLine)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (getLine)
8(9) element: LAMA_OPERATOR_EXPRESSION (s.getLine)
9(10) element: LAMA_EXPRESSION_SERIES (s.getLine)
10(11) element: LAMA_DOT_OPERATOR (.)
11(12) element: LAMA_IDENTIFIER_EXPRESSION (s)
12(13) element: LAMA_IDENTIFIER_EXPRESSION (getCol)
13(14) element: LAMA_S_OR_CALL_EXPRESSION (getCol)
14(15) element: LAMA_OPERATOR_EXPRESSION (s.getCol)
15(16) element: LAMA_EXPRESSION_SERIES (s.getCol)
16(17) element: LAMA_ARRAY_EXPRESSION ([s.getLine, s.getCol])
17(18) element: LAMA_EXPRESSION_SERIES ([s.getLine, s.getCol])
18(19) element: LAMA_IDENTIFIER_EXPRESSION (s)
19(20) element: LAMA_S_OR_CALL_EXPRESSION (s)
20(21) element: LAMA_EXPRESSION_SERIES (s)
21(22) element: LAMA_ARGUMENT_LIST (([s.getLine, s.getCol], s))
22(23) element: LAMA_S_OR_CALL_EXPRESSION (Succ ([s.getLine, s.getCol], s))
23(24) element: LAMA_OPERATOR_EXPRESSION (k $ Succ ([s.getLine, s.getCol], s))
24(25) element: LAMA_EXPRESSION_SERIES (k $ Succ ([s.getLine, s.getCol], s))
25() element: null (<no_text>)

[51] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (eof)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (k)
3(4) element: LAMA_S_OR_AT_PATTERN (k)
4(5) element: LAMA_PARAMETER_LIST ((k))
5(6) element: LAMA_SCOPE (fun (s) {)
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[52] LAMA_EXPRESSION_SERIES (fun (s) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (s)
2(3) element: LAMA_S_OR_AT_PATTERN (s)
3(4) element: LAMA_PARAMETER_LIST ((s))
4(5) element: LAMA_SCOPE (k (endOfMatcher (s)))
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[53] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (s) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (s) {)
3() element: null (<no_text>)

[54] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (endOfMatcher)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (s)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (s)
5(6) element: LAMA_EXPRESSION_SERIES (s)
6(7) element: LAMA_ARGUMENT_LIST ((s))
7(8) element: LAMA_S_OR_CALL_EXPRESSION (endOfMatcher (s))
8(9) element: LAMA_EXPRESSION_SERIES (endOfMatcher (s))
9(10) element: LAMA_ARGUMENT_LIST ((endOfMatcher (s)))
10(11) element: LAMA_S_OR_CALL_EXPRESSION (k (endOfMatcher (s)))
11(12) element: LAMA_EXPRESSION_SERIES (k (endOfMatcher (s)))
12() element: null (<no_text>)

[55] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (empty)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (k)
3(4) element: LAMA_S_OR_AT_PATTERN (k)
4(5) element: LAMA_PARAMETER_LIST ((k))
5(6) element: LAMA_SCOPE (fun (s) {k (Succ ({}, s))})
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[56] LAMA_EXPRESSION_SERIES (fun (s) {k (Succ ({}, s))}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (s)
2(3) element: LAMA_S_OR_AT_PATTERN (s)
3(4) element: LAMA_PARAMETER_LIST ((s))
4(5) element: LAMA_SCOPE (k (Succ ({}, s)))
5(6) element: LAMA_FUNCTION_BODY ({k (Succ ({}, s))})
6() element: null (<no_text>)

[57] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (s) {k (Succ ({}, s))})
2(3) element: LAMA_EXPRESSION_SERIES (fun (s) {k (Succ ({}, s))})
3() element: null (<no_text>)

[58] LAMA_FUNCTION_BODY ({k (Succ ({}, s))}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (Succ)
3(4) element: LAMA_LIST_EXPRESSION ({})
4(5) element: LAMA_EXPRESSION_SERIES ({})
5(6) element: LAMA_IDENTIFIER_EXPRESSION (s)
6(7) element: LAMA_S_OR_CALL_EXPRESSION (s)
7(8) element: LAMA_EXPRESSION_SERIES (s)
8(9) element: LAMA_ARGUMENT_LIST (({}, s))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (Succ ({}, s))
10(11) element: LAMA_EXPRESSION_SERIES (Succ ({}, s))
11(12) element: LAMA_ARGUMENT_LIST ((Succ ({}, s)))
12(13) element: LAMA_S_OR_CALL_EXPRESSION (k (Succ ({}, s)))
13(14) element: LAMA_EXPRESSION_SERIES (k (Succ ({}, s)))
14() element: null (<no_text>)

[59] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (alt)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (a)
3(4) element: LAMA_S_OR_AT_PATTERN (a)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (b)
5(6) element: LAMA_S_OR_AT_PATTERN (b)
6(7) element: LAMA_PARAMETER_LIST ((a, b))
7(8) element: LAMA_SCOPE (memo $)
8(9) element: LAMA_FUNCTION_BODY ({)
9() element: null (<no_text>)

[60] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR ($)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (memo)
3(4) element: LAMA_FUNCTION_EXPRESSION (fun (k) {)
4(5) element: LAMA_OPERATOR_EXPRESSION (memo $)
5(6) element: LAMA_EXPRESSION_SERIES (memo $)
6() element: null (<no_text>)

[61] LAMA_OPERATOR_EXPRESSION (memo $):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_S_OR_AT_PATTERN (k)
3(4) element: LAMA_PARAMETER_LIST ((k))
4(5) element: LAMA_SCOPE (fun (s) {)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[62] LAMA_EXPRESSION_SERIES (fun (s) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (s)
2(3) element: LAMA_S_OR_AT_PATTERN (s)
3(4) element: LAMA_PARAMETER_LIST ((s))
4(5) element: LAMA_SCOPE (if log then printf ("Running alt at %s\n", s.string) fi;)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[63] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (s) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (s) {)
3() element: null (<no_text>)

[64] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (log)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (log)
3(4,5) element: LAMA_EXPRESSION_SERIES (log)
4(5) element: LAMA_SCOPE (printf ("Running alt at %s\n", s.string))
5(6) element: LAMA_IF_BRANCH (then printf ("Running alt at %s\n", s.string))
6(7) element: LAMA_IF_STATEMENT (if log then printf ("Running alt at %s\n", s.string) fi)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (a)
8(9) element: LAMA_IDENTIFIER_EXPRESSION (k)
9(10) element: LAMA_S_OR_CALL_EXPRESSION (k)
10(11) element: LAMA_EXPRESSION_SERIES (k)
11(12) element: LAMA_ARGUMENT_LIST ((k))
12(13) element: LAMA_S_OR_CALL_EXPRESSION (a (k))
13(14) element: LAMA_IDENTIFIER_EXPRESSION (s)
14(15) element: LAMA_S_OR_CALL_EXPRESSION (s)
15(16) element: LAMA_EXPRESSION_SERIES (s)
16(17) element: LAMA_ARGUMENT_LIST ((s))
17(18) element: LAMA_S_OR_CALL_EXPRESSION (a (k) (s))
18(19) element: LAMA_IDENTIFIER_EXPRESSION (b)
19(20) element: LAMA_IDENTIFIER_EXPRESSION (k)
20(21) element: LAMA_S_OR_CALL_EXPRESSION (k)
21(22) element: LAMA_EXPRESSION_SERIES (k)
22(23) element: LAMA_ARGUMENT_LIST ((k))
23(24) element: LAMA_S_OR_CALL_EXPRESSION (b (k))
24(25) element: LAMA_IDENTIFIER_EXPRESSION (s)
25(26) element: LAMA_S_OR_CALL_EXPRESSION (s)
26(27) element: LAMA_EXPRESSION_SERIES (s)
27(28) element: LAMA_ARGUMENT_LIST ((s))
28(29) element: LAMA_S_OR_CALL_EXPRESSION (b (k) (s))
29(30) element: LAMA_EXPRESSION_SERIES (if log then printf ("Running alt at %s\n", s.string) fi;)
30() element: null (<no_text>)

[65] LAMA_IF_BRANCH (then printf ("Running alt at %s\n", s.string)):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (printf)
2(3) element: LAMA_STRING_LITERAL ("Running alt at %s\n")
3(4) element: LAMA_EXPRESSION_SERIES ("Running alt at %s\n")
4(5) element: LAMA_DOT_OPERATOR (.)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (s)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (string)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (string)
8(9) element: LAMA_OPERATOR_EXPRESSION (s.string)
9(10) element: LAMA_EXPRESSION_SERIES (s.string)
10(11) element: LAMA_ARGUMENT_LIST (("Running alt at %s\n", s.string))
11(12) element: LAMA_S_OR_CALL_EXPRESSION (printf ("Running alt at %s\n", s.string))
12(13) element: LAMA_EXPRESSION_SERIES (printf ("Running alt at %s\n", s.string))
13() element: null (<no_text>)

[66] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (seq)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (a)
3(4) element: LAMA_S_OR_AT_PATTERN (a)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (b)
5(6) element: LAMA_S_OR_AT_PATTERN (b)
6(7) element: LAMA_PARAMETER_LIST ((a, b))
7(8) element: LAMA_SCOPE (memo $)
8(9) element: LAMA_FUNCTION_BODY ({)
9() element: null (<no_text>)

[67] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR ($)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (memo)
3(4) element: LAMA_FUNCTION_EXPRESSION (fun (k) {)
4(5) element: LAMA_OPERATOR_EXPRESSION (memo $)
5(6) element: LAMA_EXPRESSION_SERIES (memo $)
6() element: null (<no_text>)

[68] LAMA_OPERATOR_EXPRESSION (memo $):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_S_OR_AT_PATTERN (k)
3(4) element: LAMA_PARAMETER_LIST ((k))
4(5) element: LAMA_SCOPE (fun (s) {)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[69] LAMA_EXPRESSION_SERIES (fun (s) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (s)
2(3) element: LAMA_S_OR_AT_PATTERN (s)
3(4) element: LAMA_PARAMETER_LIST ((s))
4(5) element: LAMA_SCOPE (if log then printf ("Running seq at %s\n", s.string) fi;)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[70] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (s) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (s) {)
3() element: null (<no_text>)

[71] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (log)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (log)
3(4,5) element: LAMA_EXPRESSION_SERIES (log)
4(5) element: LAMA_SCOPE (printf ("Running seq at %s\n", s.string))
5(6) element: LAMA_IF_BRANCH (then printf ("Running seq at %s\n", s.string))
6(7) element: LAMA_IF_STATEMENT (if log then printf ("Running seq at %s\n", s.string) fi)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (a)
8(9) element: LAMA_FUNCTION_EXPRESSION (fun (ar) {)
9(10) element: LAMA_EXPRESSION_SERIES (fun (ar) {)
10(11) element: LAMA_ARGUMENT_LIST ((fun (ar) {)
11(12) element: LAMA_S_OR_CALL_EXPRESSION (a (fun (ar) {)
12(13) element: LAMA_IDENTIFIER_EXPRESSION (s)
13(14) element: LAMA_S_OR_CALL_EXPRESSION (s)
14(15) element: LAMA_EXPRESSION_SERIES (s)
15(16) element: LAMA_ARGUMENT_LIST ((s))
16(17) element: LAMA_S_OR_CALL_EXPRESSION (a (fun (ar) {)
17(18) element: LAMA_EXPRESSION_SERIES (if log then printf ("Running seq at %s\n", s.string) fi;)
18() element: null (<no_text>)

[72] LAMA_IF_BRANCH (then printf ("Running seq at %s\n", s.string)):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (printf)
2(3) element: LAMA_STRING_LITERAL ("Running seq at %s\n")
3(4) element: LAMA_EXPRESSION_SERIES ("Running seq at %s\n")
4(5) element: LAMA_DOT_OPERATOR (.)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (s)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (string)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (string)
8(9) element: LAMA_OPERATOR_EXPRESSION (s.string)
9(10) element: LAMA_EXPRESSION_SERIES (s.string)
10(11) element: LAMA_ARGUMENT_LIST (("Running seq at %s\n", s.string))
11(12) element: LAMA_S_OR_CALL_EXPRESSION (printf ("Running seq at %s\n", s.string))
12(13) element: LAMA_EXPRESSION_SERIES (printf ("Running seq at %s\n", s.string))
13() element: null (<no_text>)

[73] LAMA_EXPRESSION_SERIES (fun (ar) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (ar)
2(3) element: LAMA_S_OR_AT_PATTERN (ar)
3(4) element: LAMA_PARAMETER_LIST ((ar))
4(5) element: LAMA_SCOPE (case ar of)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[74] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (ar)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (ar)
3(4) element: LAMA_EXPRESSION_SERIES (ar)
4(5) element: NULL_PSI_ELEMENT (<Fake element>)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (Succ)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (x)
7(8) element: LAMA_S_OR_AT_PATTERN (x)
8(9) element: LAMA_IDENTIFIER_EXPRESSION (s)
9(10) element: LAMA_S_OR_AT_PATTERN (s)
10(11,12) element: LAMA_S_OR_AT_PATTERN (Succ (x, s))
11(12) element: LAMA_SCOPE (b (x) (k) (s))
12(13,17) element: LAMA_CASE_BRANCH (Succ (x, s) -> b (x) (k) (s))
13(14) element: NULL_PSI_ELEMENT (<Fake element>)
14(15,16) element: LAMA_WILDCARD_PATTERN (_)
15(16) element: LAMA_SCOPE (k (ar))
16(17) element: LAMA_CASE_BRANCH (| _           -> k (ar))
17(18) element: LAMA_CASE_STATEMENT (case ar of)
18(19) element: LAMA_EXPRESSION_SERIES (case ar of)
19() element: null (<no_text>)

[75] LAMA_CASE_BRANCH (Succ (x, s) -> b (x) (k) (s)):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (b)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (x)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (x)
4(5) element: LAMA_EXPRESSION_SERIES (x)
5(6) element: LAMA_ARGUMENT_LIST ((x))
6(7) element: LAMA_S_OR_CALL_EXPRESSION (b (x))
7(8) element: LAMA_IDENTIFIER_EXPRESSION (k)
8(9) element: LAMA_S_OR_CALL_EXPRESSION (k)
9(10) element: LAMA_EXPRESSION_SERIES (k)
10(11) element: LAMA_ARGUMENT_LIST ((k))
11(12) element: LAMA_S_OR_CALL_EXPRESSION (b (x) (k))
12(13) element: LAMA_IDENTIFIER_EXPRESSION (s)
13(14) element: LAMA_S_OR_CALL_EXPRESSION (s)
14(15) element: LAMA_EXPRESSION_SERIES (s)
15(16) element: LAMA_ARGUMENT_LIST ((s))
16(17) element: LAMA_S_OR_CALL_EXPRESSION (b (x) (k) (s))
17(18) element: LAMA_EXPRESSION_SERIES (b (x) (k) (s))
18() element: null (<no_text>)

[76] LAMA_CASE_BRANCH (| _           -> k (ar)):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (ar)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (ar)
4(5) element: LAMA_EXPRESSION_SERIES (ar)
5(6) element: LAMA_ARGUMENT_LIST ((ar))
6(7) element: LAMA_S_OR_CALL_EXPRESSION (k (ar))
7(8) element: LAMA_EXPRESSION_SERIES (k (ar))
8() element: null (<no_text>)

[77] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (|)
2(3) element: LAMA_OR_OPERATOR (!!)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (a)
4(5) element: LAMA_S_OR_AT_PATTERN (a)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (b)
6(7) element: LAMA_S_OR_AT_PATTERN (b)
7(8) element: LAMA_PARAMETER_LIST ((a, b))
8(9) element: LAMA_SCOPE (alt (a, b))
9(10) element: LAMA_FUNCTION_BODY ({alt (a, b)})
10() element: null (<no_text>)

[78] LAMA_FUNCTION_BODY ({alt (a, b)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (alt)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (a)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (a)
4(5) element: LAMA_EXPRESSION_SERIES (a)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (b)
6(7) element: LAMA_S_OR_CALL_EXPRESSION (b)
7(8) element: LAMA_EXPRESSION_SERIES (b)
8(9) element: LAMA_ARGUMENT_LIST ((a, b))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (alt (a, b))
10(11) element: LAMA_EXPRESSION_SERIES (alt (a, b))
11() element: null (<no_text>)

[79] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (|>)
2(3) element: LAMA_INFIX_OPERATOR (|)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (a)
4(5) element: LAMA_S_OR_AT_PATTERN (a)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (b)
6(7) element: LAMA_S_OR_AT_PATTERN (b)
7(8) element: LAMA_PARAMETER_LIST ((a, b))
8(9) element: LAMA_SCOPE (seq (a, b))
9(10) element: LAMA_FUNCTION_BODY ({seq (a, b)})
10() element: null (<no_text>)

[80] LAMA_FUNCTION_BODY ({seq (a, b)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (seq)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (a)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (a)
4(5) element: LAMA_EXPRESSION_SERIES (a)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (b)
6(7) element: LAMA_S_OR_CALL_EXPRESSION (b)
7(8) element: LAMA_EXPRESSION_SERIES (b)
8(9) element: LAMA_ARGUMENT_LIST ((a, b))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (seq (a, b))
10(11) element: LAMA_EXPRESSION_SERIES (seq (a, b))
11() element: null (<no_text>)

[81] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (@)
2(3) element: LAMA_MUL_DIV_MOD_OPERATOR (*)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (a)
4(5) element: LAMA_S_OR_AT_PATTERN (a)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (f)
6(7) element: LAMA_S_OR_AT_PATTERN (f)
7(8) element: LAMA_PARAMETER_LIST ((a, f))
8(9) element: LAMA_SCOPE (fun (k) {)
9(10) element: LAMA_FUNCTION_BODY ({)
10() element: null (<no_text>)

[82] LAMA_EXPRESSION_SERIES (fun (k) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_S_OR_AT_PATTERN (k)
3(4) element: LAMA_PARAMETER_LIST ((k))
4(5) element: LAMA_SCOPE (fun (s) {)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[83] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (k) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (k) {)
3() element: null (<no_text>)

[84] LAMA_EXPRESSION_SERIES (fun (s) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (s)
2(3) element: LAMA_S_OR_AT_PATTERN (s)
3(4) element: LAMA_PARAMETER_LIST ((s))
4(5) element: LAMA_SCOPE (a (fun (x) {k (case x of)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[85] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (s) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (s) {)
3() element: null (<no_text>)

[86] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (a)
2(3) element: LAMA_FUNCTION_EXPRESSION (fun (x) {k (case x of)
3(4) element: LAMA_EXPRESSION_SERIES (fun (x) {k (case x of)
4(5) element: LAMA_ARGUMENT_LIST ((fun (x) {k (case x of)
5(6) element: LAMA_S_OR_CALL_EXPRESSION (a (fun (x) {k (case x of)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (s)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (s)
8(9) element: LAMA_EXPRESSION_SERIES (s)
9(10) element: LAMA_ARGUMENT_LIST ((s))
10(11) element: LAMA_S_OR_CALL_EXPRESSION (a (fun (x) {k (case x of)
11(12) element: LAMA_EXPRESSION_SERIES (a (fun (x) {k (case x of)
12() element: null (<no_text>)

[87] LAMA_EXPRESSION_SERIES (fun (x) {k (case x of):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (x)
2(3) element: LAMA_S_OR_AT_PATTERN (x)
3(4) element: LAMA_PARAMETER_LIST ((x))
4(5) element: LAMA_SCOPE (k (case x of)
5(6) element: LAMA_FUNCTION_BODY ({k (case x of)
6() element: null (<no_text>)

[88] LAMA_FUNCTION_BODY ({k (case x of):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (x)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (x)
4(5) element: LAMA_EXPRESSION_SERIES (x)
5(6) element: NULL_PSI_ELEMENT (<Fake element>)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (Succ)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (x)
8(9) element: LAMA_S_OR_AT_PATTERN (x)
9(10) element: LAMA_IDENTIFIER_EXPRESSION (s)
10(11) element: LAMA_S_OR_AT_PATTERN (s)
11(12,13) element: LAMA_S_OR_AT_PATTERN (Succ (x, s))
12(13) element: LAMA_SCOPE (Succ (f (x), s))
13(14,18) element: LAMA_CASE_BRANCH (Succ (x, s) -> Succ (f (x), s))
14(15) element: NULL_PSI_ELEMENT (<Fake element>)
15(16,17) element: LAMA_WILDCARD_PATTERN (_)
16(17) element: LAMA_SCOPE (x)
17(18) element: LAMA_CASE_BRANCH (| _           -> x)
18(19) element: LAMA_CASE_STATEMENT (case x of)
19(20) element: LAMA_EXPRESSION_SERIES (case x of)
20(21) element: LAMA_ARGUMENT_LIST ((case x of)
21(22) element: LAMA_S_OR_CALL_EXPRESSION (k (case x of)
22(23) element: LAMA_EXPRESSION_SERIES (k (case x of)
23() element: null (<no_text>)

[89] LAMA_CASE_BRANCH (Succ (x, s) -> Succ (f (x), s)):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (Succ)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (f)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (x)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (x)
5(6) element: LAMA_EXPRESSION_SERIES (x)
6(7) element: LAMA_ARGUMENT_LIST ((x))
7(8) element: LAMA_S_OR_CALL_EXPRESSION (f (x))
8(9) element: LAMA_EXPRESSION_SERIES (f (x))
9(10) element: LAMA_IDENTIFIER_EXPRESSION (s)
10(11) element: LAMA_S_OR_CALL_EXPRESSION (s)
11(12) element: LAMA_EXPRESSION_SERIES (s)
12(13) element: LAMA_ARGUMENT_LIST ((f (x), s))
13(14) element: LAMA_S_OR_CALL_EXPRESSION (Succ (f (x), s))
14(15) element: LAMA_EXPRESSION_SERIES (Succ (f (x), s))
15() element: null (<no_text>)

[90] LAMA_CASE_BRANCH (| _           -> x):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (x)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (x)
3(4) element: LAMA_EXPRESSION_SERIES (x)
4() element: null (<no_text>)

[91] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (lift)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (f)
3(4) element: LAMA_S_OR_AT_PATTERN (f)
4(5) element: LAMA_PARAMETER_LIST ((f))
5(6) element: LAMA_SCOPE (fun (x) {f})
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[92] LAMA_EXPRESSION_SERIES (fun (x) {f}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (x)
2(3) element: LAMA_S_OR_AT_PATTERN (x)
3(4) element: LAMA_PARAMETER_LIST ((x))
4(5) element: LAMA_SCOPE (f)
5(6) element: LAMA_FUNCTION_BODY ({f})
6() element: null (<no_text>)

[93] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (x) {f})
2(3) element: LAMA_EXPRESSION_SERIES (fun (x) {f})
3() element: null (<no_text>)

[94] LAMA_FUNCTION_BODY ({f}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (f)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (f)
3(4) element: LAMA_EXPRESSION_SERIES (f)
4() element: null (<no_text>)

[95] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (bypass)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (f)
3(4) element: LAMA_S_OR_AT_PATTERN (f)
4(5) element: LAMA_PARAMETER_LIST ((f))
5(6) element: LAMA_SCOPE (fun (x) {f @ lift (x)})
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[96] LAMA_EXPRESSION_SERIES (fun (x) {f @ lift (x)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (x)
2(3) element: LAMA_S_OR_AT_PATTERN (x)
3(4) element: LAMA_PARAMETER_LIST ((x))
4(5) element: LAMA_SCOPE (f @ lift (x))
5(6) element: LAMA_FUNCTION_BODY ({f @ lift (x)})
6() element: null (<no_text>)

[97] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (x) {f @ lift (x)})
2(3) element: LAMA_EXPRESSION_SERIES (fun (x) {f @ lift (x)})
3() element: null (<no_text>)

[98] LAMA_FUNCTION_BODY ({f @ lift (x)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (@)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (f)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (lift)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (x)
5(6) element: LAMA_S_OR_CALL_EXPRESSION (x)
6(7) element: LAMA_EXPRESSION_SERIES (x)
7(8) element: LAMA_ARGUMENT_LIST ((x))
8(9) element: LAMA_S_OR_CALL_EXPRESSION (lift (x))
9(10) element: LAMA_OPERATOR_EXPRESSION (f @ lift (x))
10(11) element: LAMA_EXPRESSION_SERIES (f @ lift (x))
11() element: null (<no_text>)

[99] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (opt)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (a)
3(4) element: LAMA_S_OR_AT_PATTERN (a)
4(5) element: LAMA_PARAMETER_LIST ((a))
5(6) element: LAMA_SCOPE (empty @ lift (None) | a @ fun (x) {Some (x)})
6(7) element: LAMA_FUNCTION_BODY ({empty @ lift (None) | a @ fun (x) {Some (x)}})
7() element: null (<no_text>)

[100] LAMA_FUNCTION_BODY ({empty @ lift (None) | a @ fun (x) {Some (x)}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (@)
2(3) element: LAMA_INFIX_OPERATOR (|)
3(4) element: LAMA_INFIX_OPERATOR (@)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (empty)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (lift)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (None)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (None)
8(9) element: LAMA_EXPRESSION_SERIES (None)
9(10) element: LAMA_ARGUMENT_LIST ((None))
10(11) element: LAMA_S_OR_CALL_EXPRESSION (lift (None))
11(12) element: LAMA_OPERATOR_EXPRESSION (empty @ lift (None))
12(13) element: LAMA_IDENTIFIER_EXPRESSION (a)
13(14) element: LAMA_S_OR_CALL_EXPRESSION (a)
14(15) element: LAMA_OPERATOR_EXPRESSION (empty @ lift (None) | a)
15(16) element: LAMA_FUNCTION_EXPRESSION (fun (x) {Some (x)})
16(17) element: LAMA_OPERATOR_EXPRESSION (empty @ lift (None) | a @ fun (x) {Some (x)})
17(18) element: LAMA_EXPRESSION_SERIES (empty @ lift (None) | a @ fun (x) {Some (x)})
18() element: null (<no_text>)

[101] LAMA_OPERATOR_EXPRESSION (empty @ lift (None) | a @ fun (x) {Some (x)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (x)
2(3) element: LAMA_S_OR_AT_PATTERN (x)
3(4) element: LAMA_PARAMETER_LIST ((x))
4(5) element: LAMA_SCOPE (Some (x))
5(6) element: LAMA_FUNCTION_BODY ({Some (x)})
6() element: null (<no_text>)

[102] LAMA_FUNCTION_BODY ({Some (x)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (Some)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (x)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (x)
4(5) element: LAMA_EXPRESSION_SERIES (x)
5(6) element: LAMA_ARGUMENT_LIST ((x))
6(7) element: LAMA_S_OR_CALL_EXPRESSION (Some (x))
7(8) element: LAMA_EXPRESSION_SERIES (Some (x))
8() element: null (<no_text>)

[103] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (rep0)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (a)
3(4) element: LAMA_S_OR_AT_PATTERN (a)
4(5) element: LAMA_PARAMETER_LIST ((a))
5(6) element: LAMA_SCOPE (empty @ lift({}) | a |> fun (x) {rep0 (a) @ fun (as) {x : as}})
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[104] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (|>)
2(3) element: LAMA_INFIX_OPERATOR (|)
3(4) element: LAMA_INFIX_OPERATOR (@)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (empty)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (lift)
6(7) element: LAMA_LIST_EXPRESSION ({})
7(8) element: LAMA_EXPRESSION_SERIES ({})
8(9) element: LAMA_ARGUMENT_LIST (({}))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (lift({}))
10(11) element: LAMA_OPERATOR_EXPRESSION (empty @ lift({}))
11(12) element: LAMA_IDENTIFIER_EXPRESSION (a)
12(13) element: LAMA_S_OR_CALL_EXPRESSION (a)
13(14) element: LAMA_OPERATOR_EXPRESSION (empty @ lift({}) | a)
14(15) element: LAMA_FUNCTION_EXPRESSION (fun (x) {rep0 (a) @ fun (as) {x : as}})
15(16) element: LAMA_OPERATOR_EXPRESSION (empty @ lift({}) | a |> fun (x) {rep0 (a) @ fun (as) {x : as}})
16(17) element: LAMA_EXPRESSION_SERIES (empty @ lift({}) | a |> fun (x) {rep0 (a) @ fun (as) {x : as}})
17() element: null (<no_text>)

[105] LAMA_OPERATOR_EXPRESSION (empty @ lift({}) | a |> fun (x) {rep0 (a) @ fun (as) {x : as}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (x)
2(3) element: LAMA_S_OR_AT_PATTERN (x)
3(4) element: LAMA_PARAMETER_LIST ((x))
4(5) element: LAMA_SCOPE (rep0 (a) @ fun (as) {x : as})
5(6) element: LAMA_FUNCTION_BODY ({rep0 (a) @ fun (as) {x : as}})
6() element: null (<no_text>)

[106] LAMA_FUNCTION_BODY ({rep0 (a) @ fun (as) {x : as}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (@)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (rep0)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (a)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (a)
5(6) element: LAMA_EXPRESSION_SERIES (a)
6(7) element: LAMA_ARGUMENT_LIST ((a))
7(8) element: LAMA_S_OR_CALL_EXPRESSION (rep0 (a))
8(9) element: LAMA_FUNCTION_EXPRESSION (fun (as) {x : as})
9(10) element: LAMA_OPERATOR_EXPRESSION (rep0 (a) @ fun (as) {x : as})
10(11) element: LAMA_EXPRESSION_SERIES (rep0 (a) @ fun (as) {x : as})
11() element: null (<no_text>)

[107] LAMA_OPERATOR_EXPRESSION (rep0 (a) @ fun (as) {x : as}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (as)
2(3) element: LAMA_S_OR_AT_PATTERN (as)
3(4) element: LAMA_PARAMETER_LIST ((as))
4(5) element: LAMA_SCOPE (x : as)
5(6) element: LAMA_FUNCTION_BODY ({x : as})
6() element: null (<no_text>)

[108] LAMA_FUNCTION_BODY ({x : as}):
0(1) element: null (<no_text>)
1(2) element: LAMA_LIST_CONS_OPERATOR (:)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (x)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (as)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (as)
5(6) element: LAMA_OPERATOR_EXPRESSION (x : as)
6(7) element: LAMA_EXPRESSION_SERIES (x : as)
7() element: null (<no_text>)

[109] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (rep)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (a)
3(4) element: LAMA_S_OR_AT_PATTERN (a)
4(5) element: LAMA_PARAMETER_LIST ((a))
5(6) element: LAMA_SCOPE (a |> (fun (x) {rep0 (a) @ fun (as) {x : as}}))
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[110] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (|>)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (a)
3(4) element: LAMA_SCOPE (fun (x) {rep0 (a) @ fun (as) {x : as}})
4(5) element: LAMA_PARENTHESIZED_EXPRESSION ((fun (x) {rep0 (a) @ fun (as) {x : as}}))
5(6) element: LAMA_OPERATOR_EXPRESSION (a |> (fun (x) {rep0 (a) @ fun (as) {x : as}}))
6(7) element: LAMA_EXPRESSION_SERIES (a |> (fun (x) {rep0 (a) @ fun (as) {x : as}}))
7() element: null (<no_text>)

[111] LAMA_EXPRESSION_SERIES (fun (x) {rep0 (a) @ fun (as) {x : as}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (x)
2(3) element: LAMA_S_OR_AT_PATTERN (x)
3(4) element: LAMA_PARAMETER_LIST ((x))
4(5) element: LAMA_SCOPE (rep0 (a) @ fun (as) {x : as})
5(6) element: LAMA_FUNCTION_BODY ({rep0 (a) @ fun (as) {x : as}})
6() element: null (<no_text>)

[112] LAMA_PARENTHESIZED_EXPRESSION ((fun (x) {rep0 (a) @ fun (as) {x : as}})):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (x) {rep0 (a) @ fun (as) {x : as}})
2(3) element: LAMA_EXPRESSION_SERIES (fun (x) {rep0 (a) @ fun (as) {x : as}})
3() element: null (<no_text>)

[113] LAMA_FUNCTION_BODY ({rep0 (a) @ fun (as) {x : as}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (@)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (rep0)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (a)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (a)
5(6) element: LAMA_EXPRESSION_SERIES (a)
6(7) element: LAMA_ARGUMENT_LIST ((a))
7(8) element: LAMA_S_OR_CALL_EXPRESSION (rep0 (a))
8(9) element: LAMA_FUNCTION_EXPRESSION (fun (as) {x : as})
9(10) element: LAMA_OPERATOR_EXPRESSION (rep0 (a) @ fun (as) {x : as})
10(11) element: LAMA_EXPRESSION_SERIES (rep0 (a) @ fun (as) {x : as})
11() element: null (<no_text>)

[114] LAMA_OPERATOR_EXPRESSION (rep0 (a) @ fun (as) {x : as}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (as)
2(3) element: LAMA_S_OR_AT_PATTERN (as)
3(4) element: LAMA_PARAMETER_LIST ((as))
4(5) element: LAMA_SCOPE (x : as)
5(6) element: LAMA_FUNCTION_BODY ({x : as})
6() element: null (<no_text>)

[115] LAMA_FUNCTION_BODY ({x : as}):
0(1) element: null (<no_text>)
1(2) element: LAMA_LIST_CONS_OPERATOR (:)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (x)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (as)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (as)
5(6) element: LAMA_OPERATOR_EXPRESSION (x : as)
6(7) element: LAMA_EXPRESSION_SERIES (x : as)
7() element: null (<no_text>)

[116] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (listBy)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (item)
3(4) element: LAMA_S_OR_AT_PATTERN (item)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (sep)
5(6) element: LAMA_S_OR_AT_PATTERN (sep)
6(7) element: LAMA_PARAMETER_LIST ((item, sep))
7(8) element: LAMA_SCOPE (item |> fun (i) {rep0 (sep |> lift (item)) @ fun (is) {i : is}})
8(9) element: LAMA_FUNCTION_BODY ({)
9() element: null (<no_text>)

[117] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (|>)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (item)
3(4) element: LAMA_FUNCTION_EXPRESSION (fun (i) {rep0 (sep |> lift (item)) @ fun (is) {i : is}})
4(5) element: LAMA_OPERATOR_EXPRESSION (item |> fun (i) {rep0 (sep |> lift (item)) @ fun (is) {i : is}})
5(6) element: LAMA_EXPRESSION_SERIES (item |> fun (i) {rep0 (sep |> lift (item)) @ fun (is) {i : is}})
6() element: null (<no_text>)

[118] LAMA_OPERATOR_EXPRESSION (item |> fun (i) {rep0 (sep |> lift (item)) @ fun (is) {i : is}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (i)
2(3) element: LAMA_S_OR_AT_PATTERN (i)
3(4) element: LAMA_PARAMETER_LIST ((i))
4(5) element: LAMA_SCOPE (rep0 (sep |> lift (item)) @ fun (is) {i : is})
5(6) element: LAMA_FUNCTION_BODY ({rep0 (sep |> lift (item)) @ fun (is) {i : is}})
6() element: null (<no_text>)

[119] LAMA_FUNCTION_BODY ({rep0 (sep |> lift (item)) @ fun (is) {i : is}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (@)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (rep0)
3(4) element: LAMA_INFIX_OPERATOR (|>)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (sep)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (lift)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (item)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (item)
8(9) element: LAMA_EXPRESSION_SERIES (item)
9(10) element: LAMA_ARGUMENT_LIST ((item))
10(11) element: LAMA_S_OR_CALL_EXPRESSION (lift (item))
11(12) element: LAMA_OPERATOR_EXPRESSION (sep |> lift (item))
12(13) element: LAMA_EXPRESSION_SERIES (sep |> lift (item))
13(14) element: LAMA_ARGUMENT_LIST ((sep |> lift (item)))
14(15) element: LAMA_S_OR_CALL_EXPRESSION (rep0 (sep |> lift (item)))
15(16) element: LAMA_FUNCTION_EXPRESSION (fun (is) {i : is})
16(17) element: LAMA_OPERATOR_EXPRESSION (rep0 (sep |> lift (item)) @ fun (is) {i : is})
17(18) element: LAMA_EXPRESSION_SERIES (rep0 (sep |> lift (item)) @ fun (is) {i : is})
18() element: null (<no_text>)

[120] LAMA_OPERATOR_EXPRESSION (rep0 (sep |> lift (item)) @ fun (is) {i : is}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (is)
2(3) element: LAMA_S_OR_AT_PATTERN (is)
3(4) element: LAMA_PARAMETER_LIST ((is))
4(5) element: LAMA_SCOPE (i : is)
5(6) element: LAMA_FUNCTION_BODY ({i : is})
6() element: null (<no_text>)

[121] LAMA_FUNCTION_BODY ({i : is}):
0(1) element: null (<no_text>)
1(2) element: LAMA_LIST_CONS_OPERATOR (:)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (i)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (is)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (is)
5(6) element: LAMA_OPERATOR_EXPRESSION (i : is)
6(7) element: LAMA_EXPRESSION_SERIES (i : is)
7() element: null (<no_text>)

[122] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (list0By)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (item)
3(4) element: LAMA_S_OR_AT_PATTERN (item)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (sep)
5(6) element: LAMA_S_OR_AT_PATTERN (sep)
6(7) element: LAMA_PARAMETER_LIST ((item, sep))
7(8) element: LAMA_SCOPE (empty @ lift ({}) | listBy (item, sep))
8(9) element: LAMA_FUNCTION_BODY ({)
9() element: null (<no_text>)

[123] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (|)
2(3) element: LAMA_INFIX_OPERATOR (@)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (empty)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (lift)
5(6) element: LAMA_LIST_EXPRESSION ({})
6(7) element: LAMA_EXPRESSION_SERIES ({})
7(8) element: LAMA_ARGUMENT_LIST (({}))
8(9) element: LAMA_S_OR_CALL_EXPRESSION (lift ({}))
9(10) element: LAMA_OPERATOR_EXPRESSION (empty @ lift ({}))
10(11) element: LAMA_IDENTIFIER_EXPRESSION (listBy)
11(12) element: LAMA_IDENTIFIER_EXPRESSION (item)
12(13) element: LAMA_S_OR_CALL_EXPRESSION (item)
13(14) element: LAMA_EXPRESSION_SERIES (item)
14(15) element: LAMA_IDENTIFIER_EXPRESSION (sep)
15(16) element: LAMA_S_OR_CALL_EXPRESSION (sep)
16(17) element: LAMA_EXPRESSION_SERIES (sep)
17(18) element: LAMA_ARGUMENT_LIST ((item, sep))
18(19) element: LAMA_S_OR_CALL_EXPRESSION (listBy (item, sep))
19(20) element: LAMA_OPERATOR_EXPRESSION (empty @ lift ({}) | listBy (item, sep))
20(21) element: LAMA_EXPRESSION_SERIES (empty @ lift ({}) | listBy (item, sep))
21() element: null (<no_text>)

[124] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (list)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (item)
3(4) element: LAMA_S_OR_AT_PATTERN (item)
4(5) element: LAMA_PARAMETER_LIST ((item))
5(6) element: LAMA_SCOPE (listBy (item, token (",")))
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[125] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (listBy)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (item)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (item)
4(5) element: LAMA_EXPRESSION_SERIES (item)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (token)
6(7) element: LAMA_STRING_LITERAL (",")
7(8) element: LAMA_EXPRESSION_SERIES (",")
8(9) element: LAMA_ARGUMENT_LIST ((","))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (token (","))
10(11) element: LAMA_EXPRESSION_SERIES (token (","))
11(12) element: LAMA_ARGUMENT_LIST ((item, token (",")))
12(13) element: LAMA_S_OR_CALL_EXPRESSION (listBy (item, token (",")))
13(14) element: LAMA_EXPRESSION_SERIES (listBy (item, token (",")))
14() element: null (<no_text>)

[126] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (list0)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (item)
3(4) element: LAMA_S_OR_AT_PATTERN (item)
4(5) element: LAMA_PARAMETER_LIST ((item))
5(6) element: LAMA_SCOPE (list0By (item, token (",")))
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[127] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (list0By)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (item)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (item)
4(5) element: LAMA_EXPRESSION_SERIES (item)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (token)
6(7) element: LAMA_STRING_LITERAL (",")
7(8) element: LAMA_EXPRESSION_SERIES (",")
8(9) element: LAMA_ARGUMENT_LIST ((","))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (token (","))
10(11) element: LAMA_EXPRESSION_SERIES (token (","))
11(12) element: LAMA_ARGUMENT_LIST ((item, token (",")))
12(13) element: LAMA_S_OR_CALL_EXPRESSION (list0By (item, token (",")))
13(14) element: LAMA_EXPRESSION_SERIES (list0By (item, token (",")))
14() element: null (<no_text>)

[128] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (observe)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (name)
3(4) element: LAMA_S_OR_AT_PATTERN (name)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (f)
5(6) element: LAMA_S_OR_AT_PATTERN (f)
6(7) element: LAMA_PARAMETER_LIST ((name, f))
7(8) element: LAMA_SCOPE (fun (k) {)
8(9) element: LAMA_FUNCTION_BODY ({)
9() element: null (<no_text>)

[129] LAMA_EXPRESSION_SERIES (fun (k) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_S_OR_AT_PATTERN (k)
3(4) element: LAMA_PARAMETER_LIST ((k))
4(5) element: LAMA_SCOPE (fun (s) {)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[130] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (k) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (k) {)
3() element: null (<no_text>)

[131] LAMA_EXPRESSION_SERIES (fun (s) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (s)
2(3) element: LAMA_S_OR_AT_PATTERN (s)
3(4) element: LAMA_PARAMETER_LIST ((s))
4(5) element: LAMA_SCOPE (printf ("%s at %s\n", name, s.string);)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[132] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (s) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (s) {)
3() element: null (<no_text>)

[133] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (printf)
2(3) element: LAMA_STRING_LITERAL ("%s at %s\n")
3(4) element: LAMA_EXPRESSION_SERIES ("%s at %s\n")
4(5) element: LAMA_IDENTIFIER_EXPRESSION (name)
5(6) element: LAMA_S_OR_CALL_EXPRESSION (name)
6(7) element: LAMA_EXPRESSION_SERIES (name)
7(8) element: LAMA_DOT_OPERATOR (.)
8(9) element: LAMA_IDENTIFIER_EXPRESSION (s)
9(10) element: LAMA_IDENTIFIER_EXPRESSION (string)
10(11) element: LAMA_S_OR_CALL_EXPRESSION (string)
11(12) element: LAMA_OPERATOR_EXPRESSION (s.string)
12(13) element: LAMA_EXPRESSION_SERIES (s.string)
13(14) element: LAMA_ARGUMENT_LIST (("%s at %s\n", name, s.string))
14(15) element: LAMA_S_OR_CALL_EXPRESSION (printf ("%s at %s\n", name, s.string))
15(16) element: LAMA_IDENTIFIER_EXPRESSION (f)
16(17) element: LAMA_IDENTIFIER_EXPRESSION (k)
17(18) element: LAMA_S_OR_CALL_EXPRESSION (k)
18(19) element: LAMA_EXPRESSION_SERIES (k)
19(20) element: LAMA_ARGUMENT_LIST ((k))
20(21) element: LAMA_S_OR_CALL_EXPRESSION (f (k))
21(22) element: LAMA_IDENTIFIER_EXPRESSION (s)
22(23) element: LAMA_S_OR_CALL_EXPRESSION (s)
23(24) element: LAMA_EXPRESSION_SERIES (s)
24(25) element: LAMA_ARGUMENT_LIST ((s))
25(26) element: LAMA_S_OR_CALL_EXPRESSION (f (k)(s))
26(27) element: LAMA_EXPRESSION_SERIES (printf ("%s at %s\n", name, s.string);)
27() element: null (<no_text>)

[134] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (showStream)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (name)
3(4) element: LAMA_S_OR_AT_PATTERN (name)
4(5) element: LAMA_PARAMETER_LIST ((name))
5(6) element: LAMA_SCOPE (fun (k) {)
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[135] LAMA_EXPRESSION_SERIES (fun (k) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_S_OR_AT_PATTERN (k)
3(4) element: LAMA_PARAMETER_LIST ((k))
4(5) element: LAMA_SCOPE (fun (s) {)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[136] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (k) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (k) {)
3() element: null (<no_text>)

[137] LAMA_EXPRESSION_SERIES (fun (s) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (s)
2(3) element: LAMA_S_OR_AT_PATTERN (s)
3(4) element: LAMA_PARAMETER_LIST ((s))
4(5) element: LAMA_SCOPE (printf ("%s: %s\n", name, showMatcher (s));)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[138] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (s) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (s) {)
3() element: null (<no_text>)

[139] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (printf)
2(3) element: LAMA_STRING_LITERAL ("%s: %s\n")
3(4) element: LAMA_EXPRESSION_SERIES ("%s: %s\n")
4(5) element: LAMA_IDENTIFIER_EXPRESSION (name)
5(6) element: LAMA_S_OR_CALL_EXPRESSION (name)
6(7) element: LAMA_EXPRESSION_SERIES (name)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (showMatcher)
8(9) element: LAMA_IDENTIFIER_EXPRESSION (s)
9(10) element: LAMA_S_OR_CALL_EXPRESSION (s)
10(11) element: LAMA_EXPRESSION_SERIES (s)
11(12) element: LAMA_ARGUMENT_LIST ((s))
12(13) element: LAMA_S_OR_CALL_EXPRESSION (showMatcher (s))
13(14) element: LAMA_EXPRESSION_SERIES (showMatcher (s))
14(15) element: LAMA_ARGUMENT_LIST (("%s: %s\n", name, showMatcher (s)))
15(16) element: LAMA_S_OR_CALL_EXPRESSION (printf ("%s: %s\n", name, showMatcher (s)))
16(17) element: LAMA_IDENTIFIER_EXPRESSION (k)
17(18) element: LAMA_IDENTIFIER_EXPRESSION (Succ)
18(19) element: LAMA_LIST_EXPRESSION ({})
19(20) element: LAMA_EXPRESSION_SERIES ({})
20(21) element: LAMA_IDENTIFIER_EXPRESSION (s)
21(22) element: LAMA_S_OR_CALL_EXPRESSION (s)
22(23) element: LAMA_EXPRESSION_SERIES (s)
23(24) element: LAMA_ARGUMENT_LIST (({}, s))
24(25) element: LAMA_S_OR_CALL_EXPRESSION (Succ ({}, s))
25(26) element: LAMA_EXPRESSION_SERIES (Succ ({}, s))
26(27) element: LAMA_ARGUMENT_LIST ((Succ ({}, s)))
27(28) element: LAMA_S_OR_CALL_EXPRESSION (k (Succ ({}, s)))
28(29) element: LAMA_EXPRESSION_SERIES (printf ("%s: %s\n", name, showMatcher (s));)
29() element: null (<no_text>)

[140] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (createResult)
2(3) element: LAMA_PARAMETER_LIST (())
3(4) element: LAMA_SCOPE (var errors   = ref ({}),)
4(5) element: LAMA_FUNCTION_BODY ({)
5() element: null (<no_text>)

[141] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (ref)
2(3) element: LAMA_LIST_EXPRESSION ({})
3(4) element: LAMA_EXPRESSION_SERIES ({})
4(5) element: LAMA_ARGUMENT_LIST (({}))
5(6) element: LAMA_S_OR_CALL_EXPRESSION (ref ({}))
6(7) element: LAMA_IDENTIFIER_EXPRESSION (errors)
7(8) element: LAMA_VARIABLE_DEFINITION (errors   = ref ({}))
8(9) element: LAMA_IDENTIFIER_EXPRESSION (ref)
9(10) element: LAMA_NUMERIC_LITERAL (0)
10(11) element: LAMA_EXPRESSION_SERIES (0)
11(12) element: LAMA_ARGUMENT_LIST ((0))
12(13) element: LAMA_S_OR_CALL_EXPRESSION (ref (0))
13(14) element: LAMA_IDENTIFIER_EXPRESSION (line)
14(15) element: LAMA_VARIABLE_DEFINITION (line     = ref (0))
15(16) element: LAMA_IDENTIFIER_EXPRESSION (ref)
16(17) element: LAMA_NUMERIC_LITERAL (0)
17(18) element: LAMA_EXPRESSION_SERIES (0)
18(19) element: LAMA_ARGUMENT_LIST ((0))
19(20) element: LAMA_S_OR_CALL_EXPRESSION (ref (0))
20(21) element: LAMA_IDENTIFIER_EXPRESSION (col)
21(22) element: LAMA_VARIABLE_DEFINITION (col      = ref (0))
22(23) element: LAMA_IDENTIFIER_EXPRESSION (ref)
23(24) element: LAMA_LIST_EXPRESSION ({})
24(25) element: LAMA_EXPRESSION_SERIES ({})
25(26) element: LAMA_ARGUMENT_LIST (({}))
26(27) element: LAMA_S_OR_CALL_EXPRESSION (ref ({}))
27(28) element: LAMA_IDENTIFIER_EXPRESSION (value)
28(29) element: LAMA_VARIABLE_DEFINITION (value    = ref ({}))
29(30) element: LAMA_IDENTIFIER_EXPRESSION (ref)
30(31) element: LAMA_BOOLEAN_LITERAL (false)
31(32) element: LAMA_EXPRESSION_SERIES (false)
32(33) element: LAMA_ARGUMENT_LIST ((false))
33(34) element: LAMA_S_OR_CALL_EXPRESSION (ref (false))
34(35) element: LAMA_IDENTIFIER_EXPRESSION (hasError)
35(36) element: LAMA_VARIABLE_DEFINITION (hasError = ref (false))
36(37) element: LAMA_IDENTIFIER_EXPRESSION (ref)
37(38) element: LAMA_BOOLEAN_LITERAL (false)
38(39) element: LAMA_EXPRESSION_SERIES (false)
39(40) element: LAMA_ARGUMENT_LIST ((false))
40(41) element: LAMA_S_OR_CALL_EXPRESSION (ref (false))
41(42) element: LAMA_IDENTIFIER_EXPRESSION (hasValue)
42(43) element: LAMA_VARIABLE_DEFINITION (hasValue = ref (false))
43(44) element: LAMA_VARIABLE_DEFINITION_SERIES (var errors   = ref ({}),)
44(45) element: LAMA_FUNCTION_DEFINITION (fun k (x) {)
45(46) element: LAMA_FUNCTION_DEFINITION (fun get () {)
46(47) element: LAMA_IDENTIFIER_EXPRESSION (k)
47(48) element: LAMA_S_OR_CALL_EXPRESSION (k)
48(49) element: LAMA_EXPRESSION_SERIES (k)
49(50) element: LAMA_IDENTIFIER_EXPRESSION (get)
50(51) element: LAMA_S_OR_CALL_EXPRESSION (get)
51(52) element: LAMA_EXPRESSION_SERIES (get)
52(53) element: LAMA_ARRAY_EXPRESSION ([k, get])
53(54) element: LAMA_EXPRESSION_SERIES ([k, get])
54() element: null (<no_text>)

[142] LAMA_SCOPE (var errors   = ref ({}),):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (x)
3(4) element: LAMA_S_OR_AT_PATTERN (x)
4(5) element: LAMA_PARAMETER_LIST ((x))
5(6) element: LAMA_SCOPE (if log then printf ("Result: %s\n", x.string) fi;)
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[143] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (log)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (log)
3(4,5) element: LAMA_EXPRESSION_SERIES (log)
4(5) element: LAMA_SCOPE (printf ("Result: %s\n", x.string))
5(6) element: LAMA_IF_BRANCH (then printf ("Result: %s\n", x.string))
6(7) element: LAMA_IF_STATEMENT (if log then printf ("Result: %s\n", x.string) fi)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (x)
8(9) element: LAMA_S_OR_CALL_EXPRESSION (x)
9(10) element: LAMA_EXPRESSION_SERIES (x)
10(11) element: NULL_PSI_ELEMENT (<Fake element>)
11(12) element: LAMA_IDENTIFIER_EXPRESSION (Succ)
12(13) element: LAMA_IDENTIFIER_EXPRESSION (v)
13(14) element: LAMA_S_OR_AT_PATTERN (v)
14(15) element: LAMA_IDENTIFIER_EXPRESSION (s)
15(16) element: LAMA_S_OR_AT_PATTERN (s)
16(17,18) element: LAMA_S_OR_AT_PATTERN (Succ (v, s))
17(18) element: LAMA_SCOPE (if log then printf ("Result stream: %s\n", showMatcher (s)) fi;)
18(19,30) element: LAMA_CASE_BRANCH (Succ (v, s)    ->)
19(20) element: NULL_PSI_ELEMENT (<Fake element>)
20(21) element: LAMA_IDENTIFIER_EXPRESSION (Fail)
21(22) element: LAMA_IDENTIFIER_EXPRESSION (err)
22(23) element: LAMA_S_OR_AT_PATTERN (err)
23(24) element: LAMA_IDENTIFIER_EXPRESSION (l)
24(25) element: LAMA_S_OR_AT_PATTERN (l)
25(26) element: LAMA_IDENTIFIER_EXPRESSION (c)
26(27) element: LAMA_S_OR_AT_PATTERN (c)
27(28,29) element: LAMA_S_OR_AT_PATTERN (Fail (err, l, c))
28(29) element: LAMA_SCOPE (if deref (hasError))
29(30) element: LAMA_CASE_BRANCH (| Fail (err, l, c) ->)
30(31) element: LAMA_CASE_STATEMENT (case x of)
31(32) element: LAMA_EXPRESSION_SERIES (if log then printf ("Result: %s\n", x.string) fi;)
32() element: null (<no_text>)

[144] LAMA_IF_BRANCH (then printf ("Result: %s\n", x.string)):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (printf)
2(3) element: LAMA_STRING_LITERAL ("Result: %s\n")
3(4) element: LAMA_EXPRESSION_SERIES ("Result: %s\n")
4(5) element: LAMA_DOT_OPERATOR (.)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (x)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (string)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (string)
8(9) element: LAMA_OPERATOR_EXPRESSION (x.string)
9(10) element: LAMA_EXPRESSION_SERIES (x.string)
10(11) element: LAMA_ARGUMENT_LIST (("Result: %s\n", x.string))
11(12) element: LAMA_S_OR_CALL_EXPRESSION (printf ("Result: %s\n", x.string))
12(13) element: LAMA_EXPRESSION_SERIES (printf ("Result: %s\n", x.string))
13() element: null (<no_text>)

[145] LAMA_CASE_BRANCH (Succ (v, s)    ->):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (log)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (log)
3(4,5) element: LAMA_EXPRESSION_SERIES (log)
4(5) element: LAMA_SCOPE (printf ("Result stream: %s\n", showMatcher (s)))
5(6) element: LAMA_IF_BRANCH (then printf ("Result stream: %s\n", showMatcher (s)))
6(7) element: LAMA_IF_STATEMENT (if log then printf ("Result stream: %s\n", showMatcher (s)) fi)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (deref)
8(9) element: LAMA_IDENTIFIER_EXPRESSION (hasValue)
9(10) element: LAMA_S_OR_CALL_EXPRESSION (hasValue)
10(11) element: LAMA_EXPRESSION_SERIES (hasValue)
11(12) element: LAMA_ARGUMENT_LIST ((hasValue))
12(13) element: LAMA_S_OR_CALL_EXPRESSION (deref (hasValue))
13(14,15) element: LAMA_EXPRESSION_SERIES (deref (hasValue))
14(15) element: LAMA_SCOPE (failure (sprintf ("Ostap: ambiguous parsing (%s vs. %s)", deref (value).string, v.string)))
15(16,18) element: LAMA_IF_BRANCH (then failure (sprintf ("Ostap: ambiguous parsing (%s vs. %s)", deref (value).string, v.string)))
16(17) element: LAMA_SCOPE (hasValue ::= true;)
17(18) element: LAMA_IF_BRANCH (else)
18(19) element: LAMA_IF_STATEMENT (if deref (hasValue))
19(20) element: LAMA_EXPRESSION_SERIES (if log then printf ("Result stream: %s\n", showMatcher (s)) fi;)
20() element: null (<no_text>)

[146] LAMA_IF_BRANCH (then printf ("Result stream: %s\n", showMatcher (s))):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (printf)
2(3) element: LAMA_STRING_LITERAL ("Result stream: %s\n")
3(4) element: LAMA_EXPRESSION_SERIES ("Result stream: %s\n")
4(5) element: LAMA_IDENTIFIER_EXPRESSION (showMatcher)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (s)
6(7) element: LAMA_S_OR_CALL_EXPRESSION (s)
7(8) element: LAMA_EXPRESSION_SERIES (s)
8(9) element: LAMA_ARGUMENT_LIST ((s))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (showMatcher (s))
10(11) element: LAMA_EXPRESSION_SERIES (showMatcher (s))
11(12) element: LAMA_ARGUMENT_LIST (("Result stream: %s\n", showMatcher (s)))
12(13) element: LAMA_S_OR_CALL_EXPRESSION (printf ("Result stream: %s\n", showMatcher (s)))
13(14) element: LAMA_EXPRESSION_SERIES (printf ("Result stream: %s\n", showMatcher (s)))
14() element: null (<no_text>)

[147] LAMA_IF_BRANCH (then failure (sprintf ("Ostap: ambiguous parsing (%s vs. %s)", deref (value).string, v.string))):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (failure)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (sprintf)
3(4) element: LAMA_STRING_LITERAL ("Ostap: ambiguous parsing (%s vs. %s)")
4(5) element: LAMA_EXPRESSION_SERIES ("Ostap: ambiguous parsing (%s vs. %s)")
5(6) element: LAMA_DOT_OPERATOR (.)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (deref)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (value)
8(9) element: LAMA_S_OR_CALL_EXPRESSION (value)
9(10) element: LAMA_EXPRESSION_SERIES (value)
10(11) element: LAMA_ARGUMENT_LIST ((value))
11(12) element: LAMA_S_OR_CALL_EXPRESSION (deref (value))
12(13) element: LAMA_IDENTIFIER_EXPRESSION (string)
13(14) element: LAMA_S_OR_CALL_EXPRESSION (string)
14(15) element: LAMA_OPERATOR_EXPRESSION (deref (value).string)
15(16) element: LAMA_EXPRESSION_SERIES (deref (value).string)
16(17) element: LAMA_DOT_OPERATOR (.)
17(18) element: LAMA_IDENTIFIER_EXPRESSION (v)
18(19) element: LAMA_IDENTIFIER_EXPRESSION (string)
19(20) element: LAMA_S_OR_CALL_EXPRESSION (string)
20(21) element: LAMA_OPERATOR_EXPRESSION (v.string)
21(22) element: LAMA_EXPRESSION_SERIES (v.string)
22(23) element: LAMA_ARGUMENT_LIST (("Ostap: ambiguous parsing (%s vs. %s)", deref (value).string, v.string))
23(24) element: LAMA_S_OR_CALL_EXPRESSION (sprintf ("Ostap: ambiguous parsing (%s vs. %s)", deref (value).string, v.string))
24(25) element: LAMA_EXPRESSION_SERIES (sprintf ("Ostap: ambiguous parsing (%s vs. %s)", deref (value).string, v.string))
25(26) element: LAMA_ARGUMENT_LIST ((sprintf ("Ostap: ambiguous parsing (%s vs. %s)", deref (value).string, v.string)))
26(27) element: LAMA_S_OR_CALL_EXPRESSION (failure (sprintf ("Ostap: ambiguous parsing (%s vs. %s)", deref (value).string, v.string)))
27(28) element: LAMA_EXPRESSION_SERIES (failure (sprintf ("Ostap: ambiguous parsing (%s vs. %s)", deref (value).string, v.string)))
28() element: null (<no_text>)

[148] LAMA_IF_BRANCH (else):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (::=)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (hasValue)
3(4) element: LAMA_BOOLEAN_LITERAL (true)
4(5) element: LAMA_OPERATOR_EXPRESSION (hasValue ::= true)
5(6) element: LAMA_INFIX_OPERATOR (::=)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (value)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (v)
8(9) element: LAMA_S_OR_CALL_EXPRESSION (v)
9(10) element: LAMA_OPERATOR_EXPRESSION (value    ::= v)
10(11) element: LAMA_EXPRESSION_SERIES (hasValue ::= true;)
11() element: null (<no_text>)

[149] LAMA_CASE_BRANCH (| Fail (err, l, c) ->):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (deref)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (hasError)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (hasError)
4(5) element: LAMA_EXPRESSION_SERIES (hasError)
5(6) element: LAMA_ARGUMENT_LIST ((hasError))
6(7) element: LAMA_S_OR_CALL_EXPRESSION (deref (hasError))
7(8,9) element: LAMA_EXPRESSION_SERIES (deref (hasError))
8(9) element: LAMA_SCOPE (var c = compare ([line, col], [l, c]);)
9(10,12) element: LAMA_IF_BRANCH (then)
10(11) element: LAMA_SCOPE (hasError ::= true;)
11(12) element: LAMA_IF_BRANCH (else)
12(13) element: LAMA_IF_STATEMENT (if deref (hasError))
13(14) element: LAMA_EXPRESSION_SERIES (if deref (hasError))
14() element: null (<no_text>)

[150] LAMA_IF_BRANCH (then):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (compare)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (line)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (line)
4(5) element: LAMA_EXPRESSION_SERIES (line)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (col)
6(7) element: LAMA_S_OR_CALL_EXPRESSION (col)
7(8) element: LAMA_EXPRESSION_SERIES (col)
8(9) element: LAMA_ARRAY_EXPRESSION ([line, col])
9(10) element: LAMA_EXPRESSION_SERIES ([line, col])
10(11) element: LAMA_IDENTIFIER_EXPRESSION (l)
11(12) element: LAMA_S_OR_CALL_EXPRESSION (l)
12(13) element: LAMA_EXPRESSION_SERIES (l)
13(14) element: LAMA_IDENTIFIER_EXPRESSION (c)
14(15) element: LAMA_S_OR_CALL_EXPRESSION (c)
15(16) element: LAMA_EXPRESSION_SERIES (c)
16(17) element: LAMA_ARRAY_EXPRESSION ([l, c])
17(18) element: LAMA_EXPRESSION_SERIES ([l, c])
18(19) element: LAMA_ARGUMENT_LIST (([line, col], [l, c]))
19(20) element: LAMA_S_OR_CALL_EXPRESSION (compare ([line, col], [l, c]))
20(21) element: LAMA_IDENTIFIER_EXPRESSION (c)
21(22) element: LAMA_VARIABLE_DEFINITION (c = compare ([line, col], [l, c]))
22(23) element: LAMA_VARIABLE_DEFINITION_SERIES (var c = compare ([line, col], [l, c]);)
23(24) element: LAMA_COMPARE_OPERATOR (==)
24(25) element: LAMA_IDENTIFIER_EXPRESSION (c)
25(26) element: LAMA_NUMERIC_LITERAL (0)
26(27) element: LAMA_OPERATOR_EXPRESSION (c == 0)
27(28,29) element: LAMA_EXPRESSION_SERIES (c == 0)
28(29) element: LAMA_SCOPE (errors ::= err : deref (errors))
29(30,37) element: LAMA_IF_BRANCH (then errors ::= err : deref (errors))
30(31) element: LAMA_COMPARE_OPERATOR (<)
31(32) element: LAMA_IDENTIFIER_EXPRESSION (c)
32(33) element: LAMA_NUMERIC_LITERAL (0)
33(34) element: LAMA_OPERATOR_EXPRESSION (c <  0)
34(35,36) element: LAMA_EXPRESSION_SERIES (c <  0)
35(36) element: LAMA_SCOPE (errors ::= {err}; line ::= l; col ::= c)
36(37) element: LAMA_IF_BRANCH (elif c <  0 then errors ::= {err}; line ::= l; col ::= c)
37(38) element: LAMA_IF_STATEMENT (if   c == 0 then errors ::= err : deref (errors))
38(39) element: LAMA_EXPRESSION_SERIES (if   c == 0 then errors ::= err : deref (errors))
39() element: null (<no_text>)

[151] LAMA_IF_BRANCH (then errors ::= err : deref (errors)):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (::=)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (errors)
3(4) element: LAMA_LIST_CONS_OPERATOR (:)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (err)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (deref)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (errors)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (errors)
8(9) element: LAMA_EXPRESSION_SERIES (errors)
9(10) element: LAMA_ARGUMENT_LIST ((errors))
10(11) element: LAMA_S_OR_CALL_EXPRESSION (deref (errors))
11(12) element: LAMA_OPERATOR_EXPRESSION (err : deref (errors))
12(13) element: LAMA_OPERATOR_EXPRESSION (errors ::= err : deref (errors))
13(14) element: LAMA_EXPRESSION_SERIES (errors ::= err : deref (errors))
14() element: null (<no_text>)

[152] LAMA_IF_BRANCH (elif c <  0 then errors ::= {err}; line ::= l; col ::= c):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (::=)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (errors)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (err)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (err)
5(6) element: LAMA_EXPRESSION_SERIES (err)
6(7) element: LAMA_LIST_EXPRESSION ({err})
7(8) element: LAMA_OPERATOR_EXPRESSION (errors ::= {err})
8(9) element: LAMA_INFIX_OPERATOR (::=)
9(10) element: LAMA_IDENTIFIER_EXPRESSION (line)
10(11) element: LAMA_IDENTIFIER_EXPRESSION (l)
11(12) element: LAMA_S_OR_CALL_EXPRESSION (l)
12(13) element: LAMA_OPERATOR_EXPRESSION (line ::= l)
13(14) element: LAMA_INFIX_OPERATOR (::=)
14(15) element: LAMA_IDENTIFIER_EXPRESSION (col)
15(16) element: LAMA_IDENTIFIER_EXPRESSION (c)
16(17) element: LAMA_S_OR_CALL_EXPRESSION (c)
17(18) element: LAMA_OPERATOR_EXPRESSION (col ::= c)
18(19) element: LAMA_EXPRESSION_SERIES (errors ::= {err}; line ::= l; col ::= c)
19() element: null (<no_text>)

[153] LAMA_IF_BRANCH (else):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (::=)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (hasError)
3(4) element: LAMA_BOOLEAN_LITERAL (true)
4(5) element: LAMA_OPERATOR_EXPRESSION (hasError ::= true)
5(6) element: LAMA_INFIX_OPERATOR (::=)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (errors)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (err)
8(9) element: LAMA_S_OR_CALL_EXPRESSION (err)
9(10) element: LAMA_EXPRESSION_SERIES (err)
10(11) element: LAMA_LIST_EXPRESSION ({err})
11(12) element: LAMA_OPERATOR_EXPRESSION (errors   ::= {err})
12(13) element: LAMA_INFIX_OPERATOR (::=)
13(14) element: LAMA_IDENTIFIER_EXPRESSION (line)
14(15) element: LAMA_IDENTIFIER_EXPRESSION (l)
15(16) element: LAMA_S_OR_CALL_EXPRESSION (l)
16(17) element: LAMA_OPERATOR_EXPRESSION (line     ::= l)
17(18) element: LAMA_INFIX_OPERATOR (::=)
18(19) element: LAMA_IDENTIFIER_EXPRESSION (col)
19(20) element: LAMA_IDENTIFIER_EXPRESSION (c)
20(21) element: LAMA_S_OR_CALL_EXPRESSION (c)
21(22) element: LAMA_OPERATOR_EXPRESSION (col      ::= c)
22(23) element: LAMA_EXPRESSION_SERIES (hasError ::= true;)
23() element: null (<no_text>)

[154] LAMA_SCOPE (var errors   = ref ({}),):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (get)
2(3) element: LAMA_PARAMETER_LIST (())
3(4) element: LAMA_SCOPE (if   deref (hasValue) then Succ (deref (value)))
4(5) element: LAMA_FUNCTION_BODY ({)
5() element: null (<no_text>)

[155] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (deref)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (hasValue)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (hasValue)
4(5) element: LAMA_EXPRESSION_SERIES (hasValue)
5(6) element: LAMA_ARGUMENT_LIST ((hasValue))
6(7) element: LAMA_S_OR_CALL_EXPRESSION (deref (hasValue))
7(8,9) element: LAMA_EXPRESSION_SERIES (deref (hasValue))
8(9) element: LAMA_SCOPE (Succ (deref (value)))
9(10,21) element: LAMA_IF_BRANCH (then Succ (deref (value)))
10(11) element: LAMA_IDENTIFIER_EXPRESSION (deref)
11(12) element: LAMA_IDENTIFIER_EXPRESSION (hasError)
12(13) element: LAMA_S_OR_CALL_EXPRESSION (hasError)
13(14) element: LAMA_EXPRESSION_SERIES (hasError)
14(15) element: LAMA_ARGUMENT_LIST ((hasError))
15(16) element: LAMA_S_OR_CALL_EXPRESSION (deref (hasError))
16(17,18) element: LAMA_EXPRESSION_SERIES (deref (hasError))
17(18) element: LAMA_SCOPE (Fail (deref (errors), deref (line), deref (col)))
18(19,21) element: LAMA_IF_BRANCH (elif deref (hasError) then Fail (deref (errors), deref (line), deref (col)))
19(20) element: LAMA_SCOPE (failure ("Ostap::createAcceptor::get: nothing to return\n"))
20(21) element: LAMA_IF_BRANCH (else failure ("Ostap::createAcceptor::get: nothing to return\n"))
21(22) element: LAMA_IF_STATEMENT (if   deref (hasValue) then Succ (deref (value)))
22(23) element: LAMA_EXPRESSION_SERIES (if   deref (hasValue) then Succ (deref (value)))
23() element: null (<no_text>)

[156] LAMA_IF_BRANCH (then Succ (deref (value))):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (Succ)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (deref)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (value)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (value)
5(6) element: LAMA_EXPRESSION_SERIES (value)
6(7) element: LAMA_ARGUMENT_LIST ((value))
7(8) element: LAMA_S_OR_CALL_EXPRESSION (deref (value))
8(9) element: LAMA_EXPRESSION_SERIES (deref (value))
9(10) element: LAMA_ARGUMENT_LIST ((deref (value)))
10(11) element: LAMA_S_OR_CALL_EXPRESSION (Succ (deref (value)))
11(12) element: LAMA_EXPRESSION_SERIES (Succ (deref (value)))
12() element: null (<no_text>)

[157] LAMA_IF_BRANCH (elif deref (hasError) then Fail (deref (errors), deref (line), deref (col))):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (Fail)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (deref)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (errors)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (errors)
5(6) element: LAMA_EXPRESSION_SERIES (errors)
6(7) element: LAMA_ARGUMENT_LIST ((errors))
7(8) element: LAMA_S_OR_CALL_EXPRESSION (deref (errors))
8(9) element: LAMA_EXPRESSION_SERIES (deref (errors))
9(10) element: LAMA_IDENTIFIER_EXPRESSION (deref)
10(11) element: LAMA_IDENTIFIER_EXPRESSION (line)
11(12) element: LAMA_S_OR_CALL_EXPRESSION (line)
12(13) element: LAMA_EXPRESSION_SERIES (line)
13(14) element: LAMA_ARGUMENT_LIST ((line))
14(15) element: LAMA_S_OR_CALL_EXPRESSION (deref (line))
15(16) element: LAMA_EXPRESSION_SERIES (deref (line))
16(17) element: LAMA_IDENTIFIER_EXPRESSION (deref)
17(18) element: LAMA_IDENTIFIER_EXPRESSION (col)
18(19) element: LAMA_S_OR_CALL_EXPRESSION (col)
19(20) element: LAMA_EXPRESSION_SERIES (col)
20(21) element: LAMA_ARGUMENT_LIST ((col))
21(22) element: LAMA_S_OR_CALL_EXPRESSION (deref (col))
22(23) element: LAMA_EXPRESSION_SERIES (deref (col))
23(24) element: LAMA_ARGUMENT_LIST ((deref (errors), deref (line), deref (col)))
24(25) element: LAMA_S_OR_CALL_EXPRESSION (Fail (deref (errors), deref (line), deref (col)))
25(26) element: LAMA_EXPRESSION_SERIES (Fail (deref (errors), deref (line), deref (col)))
26() element: null (<no_text>)

[158] LAMA_IF_BRANCH (else failure ("Ostap::createAcceptor::get: nothing to return\n")):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (failure)
2(3) element: LAMA_STRING_LITERAL ("Ostap::createAcceptor::get: nothing to return\n")
3(4) element: LAMA_EXPRESSION_SERIES ("Ostap::createAcceptor::get: nothing to return\n")
4(5) element: LAMA_ARGUMENT_LIST (("Ostap::createAcceptor::get: nothing to return\n"))
5(6) element: LAMA_S_OR_CALL_EXPRESSION (failure ("Ostap::createAcceptor::get: nothing to return\n"))
6(7) element: LAMA_EXPRESSION_SERIES (failure ("Ostap::createAcceptor::get: nothing to return\n"))
7() element: null (<no_text>)

[159] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (k)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (acc)
3(4) element: LAMA_S_OR_AT_PATTERN (acc)
4(5) element: LAMA_PARAMETER_LIST ((acc))
5(6) element: LAMA_SCOPE (acc [0])
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[160] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_NUMERIC_LITERAL (0)
2(3) element: LAMA_EXPRESSION_SERIES (0)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (acc)
4(5) element: LAMA_SUBSCRIPTION_EXPRESSION (acc [0])
5(6) element: LAMA_EXPRESSION_SERIES (acc [0])
6() element: null (<no_text>)

[161] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (result)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (acc)
3(4) element: LAMA_S_OR_AT_PATTERN (acc)
4(5) element: LAMA_PARAMETER_LIST ((acc))
5(6) element: LAMA_SCOPE (acc [1] ())
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[162] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_NUMERIC_LITERAL (1)
2(3) element: LAMA_EXPRESSION_SERIES (1)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (acc)
4(5) element: LAMA_SUBSCRIPTION_EXPRESSION (acc [1])
5(6) element: LAMA_ARGUMENT_LIST (())
6(7) element: LAMA_S_OR_CALL_EXPRESSION (acc [1] ())
7(8) element: LAMA_EXPRESSION_SERIES (acc [1] ())
8() element: null (<no_text>)

[163] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (parse)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (p)
3(4) element: LAMA_S_OR_AT_PATTERN (p)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (m)
5(6) element: LAMA_S_OR_AT_PATTERN (m)
6(7) element: LAMA_PARAMETER_LIST ((p, m))
7(8) element: LAMA_SCOPE (var acc = createResult ();)
8(9) element: LAMA_FUNCTION_BODY ({)
9() element: null (<no_text>)

[164] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (createResult)
2(3) element: LAMA_ARGUMENT_LIST (())
3(4) element: LAMA_S_OR_CALL_EXPRESSION (createResult ())
4(5) element: LAMA_IDENTIFIER_EXPRESSION (acc)
5(6) element: LAMA_VARIABLE_DEFINITION (acc = createResult ())
6(7) element: LAMA_VARIABLE_DEFINITION_SERIES (var acc = createResult ();)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (p)
8(9) element: LAMA_DOT_OPERATOR (.)
9(10) element: LAMA_IDENTIFIER_EXPRESSION (acc)
10(11) element: LAMA_IDENTIFIER_EXPRESSION (k)
11(12) element: LAMA_S_OR_CALL_EXPRESSION (k)
12(13) element: LAMA_OPERATOR_EXPRESSION (acc.k)
13(14) element: LAMA_EXPRESSION_SERIES (acc.k)
14(15) element: LAMA_ARGUMENT_LIST ((acc.k))
15(16) element: LAMA_S_OR_CALL_EXPRESSION (p (acc.k))
16(17) element: LAMA_IDENTIFIER_EXPRESSION (m)
17(18) element: LAMA_S_OR_CALL_EXPRESSION (m)
18(19) element: LAMA_EXPRESSION_SERIES (m)
19(20) element: LAMA_ARGUMENT_LIST ((m))
20(21) element: LAMA_S_OR_CALL_EXPRESSION (p (acc.k) (m))
21(22) element: LAMA_DOT_OPERATOR (.)
22(23) element: LAMA_IDENTIFIER_EXPRESSION (acc)
23(24) element: LAMA_IDENTIFIER_EXPRESSION (result)
24(25) element: LAMA_S_OR_CALL_EXPRESSION (result)
25(26) element: LAMA_OPERATOR_EXPRESSION (acc.result)
26(27) element: LAMA_EXPRESSION_SERIES (p (acc.k) (m);)
27() element: null (<no_text>)

[165] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (parseString)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (p)
3(4) element: LAMA_S_OR_AT_PATTERN (p)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (s)
5(6) element: LAMA_S_OR_AT_PATTERN (s)
6(7) element: LAMA_PARAMETER_LIST ((p, s))
7(8) element: LAMA_SCOPE (var acc = createResult ();)
8(9) element: LAMA_FUNCTION_BODY ({)
9() element: null (<no_text>)

[166] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (createResult)
2(3) element: LAMA_ARGUMENT_LIST (())
3(4) element: LAMA_S_OR_CALL_EXPRESSION (createResult ())
4(5) element: LAMA_IDENTIFIER_EXPRESSION (acc)
5(6) element: LAMA_VARIABLE_DEFINITION (acc = createResult ())
6(7) element: LAMA_VARIABLE_DEFINITION_SERIES (var acc = createResult ();)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (p)
8(9) element: LAMA_DOT_OPERATOR (.)
9(10) element: LAMA_IDENTIFIER_EXPRESSION (acc)
10(11) element: LAMA_IDENTIFIER_EXPRESSION (k)
11(12) element: LAMA_S_OR_CALL_EXPRESSION (k)
12(13) element: LAMA_OPERATOR_EXPRESSION (acc.k)
13(14) element: LAMA_EXPRESSION_SERIES (acc.k)
14(15) element: LAMA_ARGUMENT_LIST ((acc.k))
15(16) element: LAMA_S_OR_CALL_EXPRESSION (p (acc.k))
16(17) element: LAMA_IDENTIFIER_EXPRESSION (initMatcher)
17(18) element: LAMA_IDENTIFIER_EXPRESSION (s)
18(19) element: LAMA_S_OR_CALL_EXPRESSION (s)
19(20) element: LAMA_EXPRESSION_SERIES (s)
20(21) element: LAMA_ARGUMENT_LIST ((s))
21(22) element: LAMA_S_OR_CALL_EXPRESSION (initMatcher (s))
22(23) element: LAMA_EXPRESSION_SERIES (initMatcher (s))
23(24) element: LAMA_ARGUMENT_LIST ((initMatcher (s)))
24(25) element: LAMA_S_OR_CALL_EXPRESSION (p (acc.k) (initMatcher (s)))
25(26) element: LAMA_DOT_OPERATOR (.)
26(27) element: LAMA_IDENTIFIER_EXPRESSION (acc)
27(28) element: LAMA_IDENTIFIER_EXPRESSION (result)
28(29) element: LAMA_S_OR_CALL_EXPRESSION (result)
29(30) element: LAMA_OPERATOR_EXPRESSION (acc.result)
30(31) element: LAMA_EXPRESSION_SERIES (p (acc.k) (initMatcher (s));)
31() element: null (<no_text>)

[167] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (left)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (op)
3(4) element: LAMA_S_OR_AT_PATTERN (op)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (f)
5(6) element: LAMA_S_OR_AT_PATTERN (f)
6(7) element: LAMA_PARAMETER_LIST ((op, f))
7(8) element: LAMA_SCOPE (fun (c, x) {)
8(9) element: LAMA_FUNCTION_BODY ({)
9() element: null (<no_text>)

[168] LAMA_EXPRESSION_SERIES (fun (c, x) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (c)
2(3) element: LAMA_S_OR_AT_PATTERN (c)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (x)
4(5) element: LAMA_S_OR_AT_PATTERN (x)
5(6) element: LAMA_PARAMETER_LIST ((c, x))
6(7) element: LAMA_SCOPE (fun (y) {)
7(8) element: LAMA_FUNCTION_BODY ({)
8() element: null (<no_text>)

[169] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (c, x) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (c, x) {)
3() element: null (<no_text>)

[170] LAMA_EXPRESSION_SERIES (fun (y) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (y)
2(3) element: LAMA_S_OR_AT_PATTERN (y)
3(4) element: LAMA_PARAMETER_LIST ((y))
4(5) element: LAMA_SCOPE (f (c (x), op, y))
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[171] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (y) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (y) {)
3() element: null (<no_text>)

[172] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (f)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (c)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (x)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (x)
5(6) element: LAMA_EXPRESSION_SERIES (x)
6(7) element: LAMA_ARGUMENT_LIST ((x))
7(8) element: LAMA_S_OR_CALL_EXPRESSION (c (x))
8(9) element: LAMA_EXPRESSION_SERIES (c (x))
9(10) element: LAMA_IDENTIFIER_EXPRESSION (op)
10(11) element: LAMA_S_OR_CALL_EXPRESSION (op)
11(12) element: LAMA_EXPRESSION_SERIES (op)
12(13) element: LAMA_IDENTIFIER_EXPRESSION (y)
13(14) element: LAMA_S_OR_CALL_EXPRESSION (y)
14(15) element: LAMA_EXPRESSION_SERIES (y)
15(16) element: LAMA_ARGUMENT_LIST ((c (x), op, y))
16(17) element: LAMA_S_OR_CALL_EXPRESSION (f (c (x), op, y))
17(18) element: LAMA_EXPRESSION_SERIES (f (c (x), op, y))
18() element: null (<no_text>)

[173] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (right)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (op)
3(4) element: LAMA_S_OR_AT_PATTERN (op)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (f)
5(6) element: LAMA_S_OR_AT_PATTERN (f)
6(7) element: LAMA_PARAMETER_LIST ((op, f))
7(8) element: LAMA_SCOPE (fun (c, x) {)
8(9) element: LAMA_FUNCTION_BODY ({)
9() element: null (<no_text>)

[174] LAMA_EXPRESSION_SERIES (fun (c, x) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (c)
2(3) element: LAMA_S_OR_AT_PATTERN (c)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (x)
4(5) element: LAMA_S_OR_AT_PATTERN (x)
5(6) element: LAMA_PARAMETER_LIST ((c, x))
6(7) element: LAMA_SCOPE (fun (y) {)
7(8) element: LAMA_FUNCTION_BODY ({)
8() element: null (<no_text>)

[175] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (c, x) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (c, x) {)
3() element: null (<no_text>)

[176] LAMA_EXPRESSION_SERIES (fun (y) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (y)
2(3) element: LAMA_S_OR_AT_PATTERN (y)
3(4) element: LAMA_PARAMETER_LIST ((y))
4(5) element: LAMA_SCOPE (c (f (x, op, y)))
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[177] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (y) {)
2(3) element: LAMA_EXPRESSION_SERIES (fun (y) {)
3() element: null (<no_text>)

[178] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (c)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (f)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (x)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (x)
5(6) element: LAMA_EXPRESSION_SERIES (x)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (op)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (op)
8(9) element: LAMA_EXPRESSION_SERIES (op)
9(10) element: LAMA_IDENTIFIER_EXPRESSION (y)
10(11) element: LAMA_S_OR_CALL_EXPRESSION (y)
11(12) element: LAMA_EXPRESSION_SERIES (y)
12(13) element: LAMA_ARGUMENT_LIST ((x, op, y))
13(14) element: LAMA_S_OR_CALL_EXPRESSION (f (x, op, y))
14(15) element: LAMA_EXPRESSION_SERIES (f (x, op, y))
15(16) element: LAMA_ARGUMENT_LIST ((f (x, op, y)))
16(17) element: LAMA_S_OR_CALL_EXPRESSION (c (f (x, op, y)))
17(18) element: LAMA_EXPRESSION_SERIES (c (f (x, op, y)))
18() element: null (<no_text>)

[179] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (altl)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (level)
3(4) element: LAMA_S_OR_AT_PATTERN (level)
4(5) element: LAMA_PARAMETER_LIST ((level))
5(6) element: LAMA_SCOPE (case level of)
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[180] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (level)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (level)
3(4) element: LAMA_EXPRESSION_SERIES (level)
4(5) element: NULL_PSI_ELEMENT (<Fake element>)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (assoc)
6(7) element: LAMA_S_OR_AT_PATTERN (assoc)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (ps)
8(9) element: LAMA_S_OR_AT_PATTERN (ps)
9(10,11) element: LAMA_ARRAY_PATTERN ([assoc, ps])
10(11) element: LAMA_SCOPE (var assfun = case assoc of Left -> left | Right -> right | Nona -> left esac;)
11(12) element: LAMA_CASE_BRANCH ([assoc, ps] ->)
12(13) element: LAMA_CASE_STATEMENT (case level of)
13(14) element: LAMA_EXPRESSION_SERIES (case level of)
14() element: null (<no_text>)

[181] LAMA_CASE_BRANCH ([assoc, ps] ->):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (assoc)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (assoc)
3(4) element: LAMA_EXPRESSION_SERIES (assoc)
4(5) element: NULL_PSI_ELEMENT (<Fake element>)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (Left)
6(7,8) element: LAMA_S_OR_AT_PATTERN (Left)
7(8) element: LAMA_SCOPE (left)
8(9,19) element: LAMA_CASE_BRANCH (Left -> left)
9(10) element: NULL_PSI_ELEMENT (<Fake element>)
10(11) element: LAMA_IDENTIFIER_EXPRESSION (Right)
11(12,13) element: LAMA_S_OR_AT_PATTERN (Right)
12(13) element: LAMA_SCOPE (right)
13(14,19) element: LAMA_CASE_BRANCH (| Right -> right)
14(15) element: NULL_PSI_ELEMENT (<Fake element>)
15(16) element: LAMA_IDENTIFIER_EXPRESSION (Nona)
16(17,18) element: LAMA_S_OR_AT_PATTERN (Nona)
17(18) element: LAMA_SCOPE (left)
18(19) element: LAMA_CASE_BRANCH (| Nona -> left)
19(20) element: LAMA_CASE_STATEMENT (case assoc of Left -> left | Right -> right | Nona -> left esac)
20(21) element: LAMA_IDENTIFIER_EXPRESSION (assfun)
21(22) element: LAMA_VARIABLE_DEFINITION (assfun = case assoc of Left -> left | Right -> right | Nona -> left esac)
22(23) element: LAMA_VARIABLE_DEFINITION_SERIES (var assfun = case assoc of Left -> left | Right -> right | Nona -> left esac;)
23(24) element: LAMA_IDENTIFIER_EXPRESSION (map)
24(25) element: LAMA_FUNCTION_EXPRESSION (fun (p) {)
25(26) element: LAMA_EXPRESSION_SERIES (fun (p) {)
26(27) element: LAMA_IDENTIFIER_EXPRESSION (ps)
27(28) element: LAMA_S_OR_CALL_EXPRESSION (ps)
28(29) element: LAMA_EXPRESSION_SERIES (ps)
29(30) element: LAMA_ARGUMENT_LIST ((fun (p) {)
30(31) element: LAMA_S_OR_CALL_EXPRESSION (map (fun (p) {)
31(32) element: LAMA_EXPRESSION_SERIES (map (fun (p) {)
32(33) element: NULL_PSI_ELEMENT (<Fake element>)
33(34) element: LAMA_IDENTIFIER_EXPRESSION (p)
34(35) element: LAMA_S_OR_AT_PATTERN (p)
35(36) element: LAMA_IDENTIFIER_EXPRESSION (ps)
36(37) element: LAMA_S_OR_AT_PATTERN (ps)
37(38,39) element: LAMA_PATTERN (p : ps)
38(39) element: LAMA_SCOPE (foldl (infix |, p, ps))
39(40) element: LAMA_CASE_BRANCH (p : ps -> foldl (infix |, p, ps))
40(41) element: LAMA_CASE_STATEMENT (case map (fun (p) {)
41(42) element: LAMA_EXPRESSION_SERIES (case map (fun (p) {)
42() element: null (<no_text>)

[182] LAMA_CASE_BRANCH (Left -> left):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (left)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (left)
3(4) element: LAMA_EXPRESSION_SERIES (left)
4() element: null (<no_text>)

[183] LAMA_CASE_BRANCH (| Right -> right):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (right)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (right)
3(4) element: LAMA_EXPRESSION_SERIES (right)
4() element: null (<no_text>)

[184] LAMA_CASE_BRANCH (| Nona -> left):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (left)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (left)
3(4) element: LAMA_EXPRESSION_SERIES (left)
4() element: null (<no_text>)

[185] LAMA_EXPRESSION_SERIES (fun (p) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (p)
2(3) element: LAMA_S_OR_AT_PATTERN (p)
3(4) element: LAMA_PARAMETER_LIST ((p))
4(5) element: LAMA_SCOPE (case p of)
5(6) element: LAMA_FUNCTION_BODY ({)
6() element: null (<no_text>)

[186] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (p)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (p)
3(4) element: LAMA_EXPRESSION_SERIES (p)
4(5) element: NULL_PSI_ELEMENT (<Fake element>)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (op)
6(7) element: LAMA_S_OR_AT_PATTERN (op)
7(8) element: LAMA_IDENTIFIER_EXPRESSION (sema)
8(9) element: LAMA_S_OR_AT_PATTERN (sema)
9(10,11) element: LAMA_ARRAY_PATTERN ([op, sema])
10(11) element: LAMA_SCOPE (op @ fun (op) {assfun (op, sema)})
11(12) element: LAMA_CASE_BRANCH ([op, sema] -> op @ fun (op) {assfun (op, sema)})
12(13) element: LAMA_CASE_STATEMENT (case p of)
13(14) element: LAMA_EXPRESSION_SERIES (case p of)
14() element: null (<no_text>)

[187] LAMA_CASE_BRANCH ([op, sema] -> op @ fun (op) {assfun (op, sema)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (@)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (op)
3(4) element: LAMA_FUNCTION_EXPRESSION (fun (op) {assfun (op, sema)})
4(5) element: LAMA_OPERATOR_EXPRESSION (op @ fun (op) {assfun (op, sema)})
5(6) element: LAMA_EXPRESSION_SERIES (op @ fun (op) {assfun (op, sema)})
6() element: null (<no_text>)

[188] LAMA_OPERATOR_EXPRESSION (op @ fun (op) {assfun (op, sema)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (op)
2(3) element: LAMA_S_OR_AT_PATTERN (op)
3(4) element: LAMA_PARAMETER_LIST ((op))
4(5) element: LAMA_SCOPE (assfun (op, sema))
5(6) element: LAMA_FUNCTION_BODY ({assfun (op, sema)})
6() element: null (<no_text>)

[189] LAMA_FUNCTION_BODY ({assfun (op, sema)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (assfun)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (op)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (op)
4(5) element: LAMA_EXPRESSION_SERIES (op)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (sema)
6(7) element: LAMA_S_OR_CALL_EXPRESSION (sema)
7(8) element: LAMA_EXPRESSION_SERIES (sema)
8(9) element: LAMA_ARGUMENT_LIST ((op, sema))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (assfun (op, sema))
10(11) element: LAMA_EXPRESSION_SERIES (assfun (op, sema))
11() element: null (<no_text>)

[190] LAMA_CASE_BRANCH (p : ps -> foldl (infix |, p, ps)):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (foldl)
2(3) element: LAMA_INFIX_OPERATOR (|)
3(4) element: LAMA_INFIX_EXPRESSION (infix |)
4(5) element: LAMA_EXPRESSION_SERIES (infix |)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (p)
6(7) element: LAMA_S_OR_CALL_EXPRESSION (p)
7(8) element: LAMA_EXPRESSION_SERIES (p)
8(9) element: LAMA_IDENTIFIER_EXPRESSION (ps)
9(10) element: LAMA_S_OR_CALL_EXPRESSION (ps)
10(11) element: LAMA_EXPRESSION_SERIES (ps)
11(12) element: LAMA_ARGUMENT_LIST ((infix |, p, ps))
12(13) element: LAMA_S_OR_CALL_EXPRESSION (foldl (infix |, p, ps))
13(14) element: LAMA_EXPRESSION_SERIES (foldl (infix |, p, ps))
14() element: null (<no_text>)

[191] LAMA_SCOPE (var tab, hct, restab, log = false;):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (expr)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (ops)
3(4) element: LAMA_S_OR_AT_PATTERN (ops)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (opnd)
5(6) element: LAMA_S_OR_AT_PATTERN (opnd)
6(7) element: LAMA_PARAMETER_LIST ((ops, opnd))
7(8) element: LAMA_SCOPE (fun inner (ops) {)
8(9) element: LAMA_FUNCTION_BODY ({)
9() element: null (<no_text>)

[192] LAMA_SCOPE (fun inner (ops) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (inner)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (ops)
3(4) element: LAMA_S_OR_AT_PATTERN (ops)
4(5) element: LAMA_PARAMETER_LIST ((ops))
5(6) element: LAMA_SCOPE (case ops of)
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[193] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_DEFINITION (fun inner (ops) {)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (inner)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (ops)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (ops)
5(6) element: LAMA_EXPRESSION_SERIES (ops)
6(7) element: LAMA_ARGUMENT_LIST ((ops))
7(8) element: LAMA_S_OR_CALL_EXPRESSION (inner (ops))
8(9) element: LAMA_IDENTIFIER_EXPRESSION (id)
9(10) element: LAMA_S_OR_CALL_EXPRESSION (id)
10(11) element: LAMA_EXPRESSION_SERIES (id)
11(12) element: LAMA_ARGUMENT_LIST ((id))
12(13) element: LAMA_S_OR_CALL_EXPRESSION (inner (ops) (id))
13(14) element: LAMA_EXPRESSION_SERIES (inner (ops) (id))
14() element: null (<no_text>)

[194] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (ops)
2(3) element: LAMA_S_OR_CALL_EXPRESSION (ops)
3(4) element: LAMA_EXPRESSION_SERIES (ops)
4(5) element: NULL_PSI_ELEMENT (<Fake element>)
5(6,7) element: LAMA_LIST_PATTERN ({})
6(7) element: LAMA_SCOPE (fun (c) {opnd @ c})
7(8,16) element: LAMA_CASE_BRANCH ({}         -> fun (c) {opnd @ c})
8(9) element: NULL_PSI_ELEMENT (<Fake element>)
9(10) element: LAMA_IDENTIFIER_EXPRESSION (level)
10(11) element: LAMA_S_OR_AT_PATTERN (level)
11(12) element: LAMA_IDENTIFIER_EXPRESSION (tl)
12(13) element: LAMA_S_OR_AT_PATTERN (tl)
13(14,15) element: LAMA_PATTERN (level : tl)
14(15) element: LAMA_SCOPE (var lops = altl (level),)
15(16) element: LAMA_CASE_BRANCH (| level : tl ->)
16(17) element: LAMA_CASE_STATEMENT (case ops of)
17(18) element: LAMA_EXPRESSION_SERIES (case ops of)
18() element: null (<no_text>)

[195] LAMA_EXPRESSION_SERIES (fun (c) {opnd @ c}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (c)
2(3) element: LAMA_S_OR_AT_PATTERN (c)
3(4) element: LAMA_PARAMETER_LIST ((c))
4(5) element: LAMA_SCOPE (opnd @ c)
5(6) element: LAMA_FUNCTION_BODY ({opnd @ c})
6() element: null (<no_text>)

[196] LAMA_CASE_BRANCH ({}         -> fun (c) {opnd @ c}):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_EXPRESSION (fun (c) {opnd @ c})
2(3) element: LAMA_EXPRESSION_SERIES (fun (c) {opnd @ c})
3() element: null (<no_text>)

[197] LAMA_FUNCTION_BODY ({opnd @ c}):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (@)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (opnd)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (c)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (c)
5(6) element: LAMA_OPERATOR_EXPRESSION (opnd @ c)
6(7) element: LAMA_EXPRESSION_SERIES (opnd @ c)
7() element: null (<no_text>)

[198] LAMA_CASE_BRANCH (| level : tl ->):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (altl)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (level)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (level)
4(5) element: LAMA_EXPRESSION_SERIES (level)
5(6) element: LAMA_ARGUMENT_LIST ((level))
6(7) element: LAMA_S_OR_CALL_EXPRESSION (altl (level))
7(8) element: LAMA_IDENTIFIER_EXPRESSION (lops)
8(9) element: LAMA_VARIABLE_DEFINITION (lops = altl (level))
9(10) element: LAMA_IDENTIFIER_EXPRESSION (inner)
10(11) element: LAMA_IDENTIFIER_EXPRESSION (tl)
11(12) element: LAMA_S_OR_CALL_EXPRESSION (tl)
12(13) element: LAMA_EXPRESSION_SERIES (tl)
13(14) element: LAMA_ARGUMENT_LIST ((tl))
14(15) element: LAMA_S_OR_CALL_EXPRESSION (inner (tl))
15(16) element: LAMA_IDENTIFIER_EXPRESSION (next)
16(17) element: LAMA_VARIABLE_DEFINITION (next = inner (tl))
17(18) element: LAMA_VARIABLE_DEFINITION_SERIES (var lops = altl (level),)
18(19) element: LAMA_DOT_OPERATOR (.)
19(20) element: LAMA_IDENTIFIER_EXPRESSION (level)
20(21) element: LAMA_IDENTIFIER_EXPRESSION (fst)
21(22) element: LAMA_S_OR_CALL_EXPRESSION (fst)
22(23) element: LAMA_OPERATOR_EXPRESSION (level.fst)
23(24) element: LAMA_EXPRESSION_SERIES (level.fst)
24(25) element: NULL_PSI_ELEMENT (<Fake element>)
25(26) element: LAMA_IDENTIFIER_EXPRESSION (Nona)
26(27,28) element: LAMA_S_OR_AT_PATTERN (Nona)
27(28) element: LAMA_SCOPE (fun this (c) {)
28(29,33) element: LAMA_CASE_BRANCH (Nona ->)
29(30) element: NULL_PSI_ELEMENT (<Fake element>)
30(31,32) element: LAMA_WILDCARD_PATTERN (_)
31(32) element: LAMA_SCOPE (fun this (c) {)
32(33) element: LAMA_CASE_BRANCH (| _    ->)
33(34) element: LAMA_CASE_STATEMENT (case level.fst of)
34(35) element: LAMA_EXPRESSION_SERIES (case level.fst of)
35() element: null (<no_text>)

[199] LAMA_SCOPE (fun this (c) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (this)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (c)
3(4) element: LAMA_S_OR_AT_PATTERN (c)
4(5) element: LAMA_PARAMETER_LIST ((c))
5(6) element: LAMA_SCOPE (next (id) |> fun (l) {lops |> fun (op) {next (id) @ fun (r) {c (op)(id, l)(r)}}})
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[200] LAMA_CASE_BRANCH (Nona ->):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_DEFINITION (fun this (c) {)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (this)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (this)
4(5) element: LAMA_EXPRESSION_SERIES (this)
5() element: null (<no_text>)

[201] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (@)
2(3) element: LAMA_INFIX_OPERATOR (|)
3(4) element: LAMA_INFIX_OPERATOR (|>)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (next)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (id)
6(7) element: LAMA_S_OR_CALL_EXPRESSION (id)
7(8) element: LAMA_EXPRESSION_SERIES (id)
8(9) element: LAMA_ARGUMENT_LIST ((id))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (next (id))
10(11) element: LAMA_FUNCTION_EXPRESSION (fun (l) {lops |> fun (op) {next (id) @ fun (r) {c (op)(id, l)(r)}}})
11(12) element: LAMA_OPERATOR_EXPRESSION (next (id) |> fun (l) {lops |> fun (op) {next (id) @ fun (r) {c (op)(id, l)(r)}}})
12(13) element: LAMA_IDENTIFIER_EXPRESSION (next)
13(14) element: LAMA_IDENTIFIER_EXPRESSION (id)
14(15) element: LAMA_S_OR_CALL_EXPRESSION (id)
15(16) element: LAMA_EXPRESSION_SERIES (id)
16(17) element: LAMA_ARGUMENT_LIST ((id))
17(18) element: LAMA_S_OR_CALL_EXPRESSION (next (id))
18(19) element: LAMA_OPERATOR_EXPRESSION (next (id) |> fun (l) {lops |> fun (op) {next (id) @ fun (r) {c (op)(id, l)(r)}}})
19(20) element: LAMA_IDENTIFIER_EXPRESSION (c)
20(21) element: LAMA_S_OR_CALL_EXPRESSION (c)
21(22) element: LAMA_OPERATOR_EXPRESSION (next (id) |> fun (l) {lops |> fun (op) {next (id) @ fun (r) {c (op)(id, l)(r)}}})
22(23) element: LAMA_EXPRESSION_SERIES (next (id) |> fun (l) {lops |> fun (op) {next (id) @ fun (r) {c (op)(id, l)(r)}}})
23() element: null (<no_text>)

[202] LAMA_OPERATOR_EXPRESSION (next (id) |> fun (l) {lops |> fun (op) {next (id) @ fun (r) {c (op)(id, l)(r)}}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (l)
2(3) element: LAMA_S_OR_AT_PATTERN (l)
3(4) element: LAMA_PARAMETER_LIST ((l))
4(5) element: LAMA_SCOPE (lops |> fun (op) {next (id) @ fun (r) {c (op)(id, l)(r)}})
5(6) element: LAMA_FUNCTION_BODY ({lops |> fun (op) {next (id) @ fun (r) {c (op)(id, l)(r)}}})
6() element: null (<no_text>)

[203] LAMA_FUNCTION_BODY ({lops |> fun (op) {next (id) @ fun (r) {c (op)(id, l)(r)}}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (|>)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (lops)
3(4) element: LAMA_FUNCTION_EXPRESSION (fun (op) {next (id) @ fun (r) {c (op)(id, l)(r)}})
4(5) element: LAMA_OPERATOR_EXPRESSION (lops |> fun (op) {next (id) @ fun (r) {c (op)(id, l)(r)}})
5(6) element: LAMA_EXPRESSION_SERIES (lops |> fun (op) {next (id) @ fun (r) {c (op)(id, l)(r)}})
6() element: null (<no_text>)

[204] LAMA_OPERATOR_EXPRESSION (lops |> fun (op) {next (id) @ fun (r) {c (op)(id, l)(r)}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (op)
2(3) element: LAMA_S_OR_AT_PATTERN (op)
3(4) element: LAMA_PARAMETER_LIST ((op))
4(5) element: LAMA_SCOPE (next (id) @ fun (r) {c (op)(id, l)(r)})
5(6) element: LAMA_FUNCTION_BODY ({next (id) @ fun (r) {c (op)(id, l)(r)}})
6() element: null (<no_text>)

[205] LAMA_FUNCTION_BODY ({next (id) @ fun (r) {c (op)(id, l)(r)}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (@)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (next)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (id)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (id)
5(6) element: LAMA_EXPRESSION_SERIES (id)
6(7) element: LAMA_ARGUMENT_LIST ((id))
7(8) element: LAMA_S_OR_CALL_EXPRESSION (next (id))
8(9) element: LAMA_FUNCTION_EXPRESSION (fun (r) {c (op)(id, l)(r)})
9(10) element: LAMA_OPERATOR_EXPRESSION (next (id) @ fun (r) {c (op)(id, l)(r)})
10(11) element: LAMA_EXPRESSION_SERIES (next (id) @ fun (r) {c (op)(id, l)(r)})
11() element: null (<no_text>)

[206] LAMA_OPERATOR_EXPRESSION (next (id) @ fun (r) {c (op)(id, l)(r)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (r)
2(3) element: LAMA_S_OR_AT_PATTERN (r)
3(4) element: LAMA_PARAMETER_LIST ((r))
4(5) element: LAMA_SCOPE (c (op)(id, l)(r))
5(6) element: LAMA_FUNCTION_BODY ({c (op)(id, l)(r)})
6() element: null (<no_text>)

[207] LAMA_FUNCTION_BODY ({c (op)(id, l)(r)}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (c)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (op)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (op)
4(5) element: LAMA_EXPRESSION_SERIES (op)
5(6) element: LAMA_ARGUMENT_LIST ((op))
6(7) element: LAMA_S_OR_CALL_EXPRESSION (c (op))
7(8) element: LAMA_IDENTIFIER_EXPRESSION (id)
8(9) element: LAMA_S_OR_CALL_EXPRESSION (id)
9(10) element: LAMA_EXPRESSION_SERIES (id)
10(11) element: LAMA_IDENTIFIER_EXPRESSION (l)
11(12) element: LAMA_S_OR_CALL_EXPRESSION (l)
12(13) element: LAMA_EXPRESSION_SERIES (l)
13(14) element: LAMA_ARGUMENT_LIST ((id, l))
14(15) element: LAMA_S_OR_CALL_EXPRESSION (c (op)(id, l))
15(16) element: LAMA_IDENTIFIER_EXPRESSION (r)
16(17) element: LAMA_S_OR_CALL_EXPRESSION (r)
17(18) element: LAMA_EXPRESSION_SERIES (r)
18(19) element: LAMA_ARGUMENT_LIST ((r))
19(20) element: LAMA_S_OR_CALL_EXPRESSION (c (op)(id, l)(r))
20(21) element: LAMA_EXPRESSION_SERIES (c (op)(id, l)(r))
21() element: null (<no_text>)

[208] LAMA_SCOPE (fun this (c) {):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (this)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (c)
3(4) element: LAMA_S_OR_AT_PATTERN (c)
4(5) element: LAMA_PARAMETER_LIST ((c))
5(6) element: LAMA_SCOPE (next (id) |> fun (l) {lops |> fun (op) {this (op (c, l))}})
6(7) element: LAMA_FUNCTION_BODY ({)
7() element: null (<no_text>)

[209] LAMA_CASE_BRANCH (| _    ->):
0(1) element: null (<no_text>)
1(2) element: LAMA_FUNCTION_DEFINITION (fun this (c) {)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (this)
3(4) element: LAMA_S_OR_CALL_EXPRESSION (this)
4(5) element: LAMA_EXPRESSION_SERIES (this)
5() element: null (<no_text>)

[210] LAMA_FUNCTION_BODY ({):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (@)
2(3) element: LAMA_INFIX_OPERATOR (|)
3(4) element: LAMA_INFIX_OPERATOR (|>)
4(5) element: LAMA_IDENTIFIER_EXPRESSION (next)
5(6) element: LAMA_IDENTIFIER_EXPRESSION (id)
6(7) element: LAMA_S_OR_CALL_EXPRESSION (id)
7(8) element: LAMA_EXPRESSION_SERIES (id)
8(9) element: LAMA_ARGUMENT_LIST ((id))
9(10) element: LAMA_S_OR_CALL_EXPRESSION (next (id))
10(11) element: LAMA_FUNCTION_EXPRESSION (fun (l) {lops |> fun (op) {this (op (c, l))}})
11(12) element: LAMA_OPERATOR_EXPRESSION (next (id) |> fun (l) {lops |> fun (op) {this (op (c, l))}})
12(13) element: LAMA_IDENTIFIER_EXPRESSION (next)
13(14) element: LAMA_IDENTIFIER_EXPRESSION (id)
14(15) element: LAMA_S_OR_CALL_EXPRESSION (id)
15(16) element: LAMA_EXPRESSION_SERIES (id)
16(17) element: LAMA_ARGUMENT_LIST ((id))
17(18) element: LAMA_S_OR_CALL_EXPRESSION (next (id))
18(19) element: LAMA_OPERATOR_EXPRESSION (next (id) |> fun (l) {lops |> fun (op) {this (op (c, l))}})
19(20) element: LAMA_IDENTIFIER_EXPRESSION (c)
20(21) element: LAMA_S_OR_CALL_EXPRESSION (c)
21(22) element: LAMA_OPERATOR_EXPRESSION (next (id) |> fun (l) {lops |> fun (op) {this (op (c, l))}})
22(23) element: LAMA_EXPRESSION_SERIES (next (id) |> fun (l) {lops |> fun (op) {this (op (c, l))}})
23() element: null (<no_text>)

[211] LAMA_OPERATOR_EXPRESSION (next (id) |> fun (l) {lops |> fun (op) {this (op (c, l))}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (l)
2(3) element: LAMA_S_OR_AT_PATTERN (l)
3(4) element: LAMA_PARAMETER_LIST ((l))
4(5) element: LAMA_SCOPE (lops |> fun (op) {this (op (c, l))})
5(6) element: LAMA_FUNCTION_BODY ({lops |> fun (op) {this (op (c, l))}})
6() element: null (<no_text>)

[212] LAMA_FUNCTION_BODY ({lops |> fun (op) {this (op (c, l))}}):
0(1) element: null (<no_text>)
1(2) element: LAMA_INFIX_OPERATOR (|>)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (lops)
3(4) element: LAMA_FUNCTION_EXPRESSION (fun (op) {this (op (c, l))})
4(5) element: LAMA_OPERATOR_EXPRESSION (lops |> fun (op) {this (op (c, l))})
5(6) element: LAMA_EXPRESSION_SERIES (lops |> fun (op) {this (op (c, l))})
6() element: null (<no_text>)

[213] LAMA_OPERATOR_EXPRESSION (lops |> fun (op) {this (op (c, l))}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (op)
2(3) element: LAMA_S_OR_AT_PATTERN (op)
3(4) element: LAMA_PARAMETER_LIST ((op))
4(5) element: LAMA_SCOPE (this (op (c, l)))
5(6) element: LAMA_FUNCTION_BODY ({this (op (c, l))})
6() element: null (<no_text>)

[214] LAMA_FUNCTION_BODY ({this (op (c, l))}):
0(1) element: null (<no_text>)
1(2) element: LAMA_IDENTIFIER_EXPRESSION (this)
2(3) element: LAMA_IDENTIFIER_EXPRESSION (op)
3(4) element: LAMA_IDENTIFIER_EXPRESSION (c)
4(5) element: LAMA_S_OR_CALL_EXPRESSION (c)
5(6) element: LAMA_EXPRESSION_SERIES (c)
6(7) element: LAMA_IDENTIFIER_EXPRESSION (l)
7(8) element: LAMA_S_OR_CALL_EXPRESSION (l)
8(9) element: LAMA_EXPRESSION_SERIES (l)
9(10) element: LAMA_ARGUMENT_LIST ((c, l))
10(11) element: LAMA_S_OR_CALL_EXPRESSION (op (c, l))
11(12) element: LAMA_EXPRESSION_SERIES (op (c, l))
12(13) element: LAMA_ARGUMENT_LIST ((op (c, l)))
13(14) element: LAMA_S_OR_CALL_EXPRESSION (this (op (c, l)))
14(15) element: LAMA_EXPRESSION_SERIES (this (op (c, l)))
15() element: null (<no_text>)

