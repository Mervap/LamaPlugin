/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.jetbrains.lama.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import static org.jetbrains.lama.parser.LamaElementTypes.*;
import static org.jetbrains.lama.parser.LamaParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lama.flex</tt>
 */
class _LamaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14112 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\100\1\36\1\55\1\101\1\1\1\57\1\16\1\102\1\76\1\36\1\13\1\103\1"+
    "\57\1\104\1\16\1\42\1\105\1\106\1\13\1\107\1\110\3\1\1\25\2\13\1\111\1\110"+
    "\3\1\1\112\1\113\1\114\1\115\1\116\1\117\2\1\1\67\3\1\1\120\1\13\1\121\1\1"+
    "\1\122\7\1\2\13\1\30\1\123\1\1\1\124\1\125\1\126\1\127\1\1\2\13\1\130\2\13"+
    "\1\131\24\13\1\132\1\133\2\13\1\132\2\13\1\134\1\135\1\14\3\13\1\135\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\136\1\25\45\13\1\137\1\13\1\25\1\30\4\13\1\30\1"+
    "\140\1\141\1\16\1\13\1\16\1\13\1\16\1\141\1\67\3\13\1\142\1\1\1\143\4\1\5"+
    "\13\1\27\1\144\1\13\1\145\4\13\1\40\1\13\1\146\3\1\1\13\1\147\1\150\2\13\1"+
    "\151\1\13\1\75\3\1\1\13\1\110\3\13\1\150\4\1\1\152\5\1\1\105\2\13\1\142\1"+
    "\153\3\1\1\154\1\13\1\155\1\42\2\13\1\40\1\1\2\13\1\142\1\1\1\37\1\42\1\13"+
    "\1\147\1\46\5\1\1\156\1\157\14\13\4\1\21\13\1\136\2\13\1\136\1\160\1\13\1"+
    "\147\3\13\1\161\1\162\1\163\1\121\1\162\2\1\1\164\4\1\1\165\1\1\1\121\6\1"+
    "\1\166\1\167\1\170\1\171\1\172\3\1\1\173\147\1\2\13\1\146\2\13\1\146\10\13"+
    "\1\174\1\175\2\13\1\130\3\13\1\176\1\1\1\13\1\110\4\177\4\1\1\123\35\1\1\200"+
    "\2\1\1\201\1\25\4\13\1\202\1\25\4\13\1\131\1\105\1\13\1\147\1\25\4\13\1\146"+
    "\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\121\4"+
    "\1\2\13\1\147\20\13\1\121\1\13\1\203\1\1\2\13\1\146\1\123\1\13\1\147\4\13"+
    "\1\40\2\1\1\204\1\205\5\13\1\206\1\13\1\146\1\27\3\1\1\204\1\207\1\13\1\31"+
    "\1\1\3\13\1\142\1\205\2\13\1\142\3\1\1\210\1\42\1\13\1\40\1\13\1\110\1\1\1"+
    "\13\1\121\1\50\2\13\1\31\1\123\1\1\1\211\1\212\2\13\1\46\1\1\1\213\1\1\1\13"+
    "\1\214\3\13\1\215\1\216\1\217\1\30\1\64\1\220\1\221\1\177\2\13\1\131\1\40"+
    "\7\13\1\31\1\1\72\13\1\142\1\13\1\222\2\13\1\151\20\1\26\13\1\147\6\13\1\75"+
    "\2\1\1\110\1\223\1\55\1\224\1\225\6\13\1\16\1\1\1\154\25\13\1\147\1\1\4\13"+
    "\1\205\2\13\1\27\2\1\1\151\7\1\1\211\7\13\1\121\2\1\1\25\1\30\1\25\1\30\1"+
    "\226\4\13\1\146\1\227\1\230\2\1\1\231\1\13\1\14\1\232\2\147\2\1\7\13\1\30"+
    "\30\1\1\13\1\121\3\13\1\67\2\1\2\13\1\1\1\13\1\233\2\13\1\40\1\13\1\147\2"+
    "\13\1\234\3\1\11\13\1\147\1\1\2\13\1\234\1\13\1\151\2\13\1\27\3\13\1\142\11"+
    "\1\23\13\1\110\1\13\1\40\1\27\11\1\1\235\2\13\1\236\1\13\1\40\1\13\1\110\1"+
    "\13\1\146\4\1\1\13\1\237\1\13\1\40\1\13\1\75\4\1\3\13\1\240\4\1\1\67\1\241"+
    "\1\13\1\142\2\1\1\13\1\121\1\13\1\121\2\1\1\120\1\13\1\150\1\1\3\13\1\40\1"+
    "\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1"+
    "\154\2\13\1\27\4\1\1\154\2\13\2\1\1\13\1\46\1\1\1\154\1\13\1\110\2\1\2\13"+
    "\1\242\1\154\2\13\1\31\1\243\1\244\2\1\1\13\1\22\1\151\5\1\1\245\1\246\1\46"+
    "\2\13\1\146\2\1\1\71\1\54\1\55\1\66\1\1\1\247\1\16\11\1\3\13\1\150\1\250\3"+
    "\1\3\13\1\1\1\251\13\1\2\13\1\146\2\1\1\252\2\1\3\13\1\1\1\253\3\1\2\13\1"+
    "\30\5\1\1\13\1\75\30\1\4\13\1\1\1\123\34\1\3\13\1\46\20\1\1\55\1\13\1\146"+
    "\1\1\1\67\2\1\1\205\1\13\67\1\71\13\1\75\16\1\14\13\1\142\53\1\2\13\1\146"+
    "\75\1\44\13\1\110\33\1\43\13\1\46\1\13\1\146\7\1\1\13\1\147\1\1\3\13\1\1\1"+
    "\142\1\1\1\154\1\254\1\13\67\1\4\13\1\150\1\67\3\1\1\154\4\1\1\67\1\1\76\13"+
    "\1\121\1\1\57\13\1\31\20\1\1\16\77\1\6\13\1\30\1\121\1\46\1\75\66\1\5\13\1"+
    "\211\3\13\1\141\1\255\1\256\1\257\3\13\1\260\1\261\1\13\1\262\1\263\1\36\24"+
    "\13\1\264\1\13\1\36\1\131\1\13\1\131\1\13\1\211\1\13\1\211\1\146\1\13\1\146"+
    "\1\13\1\55\1\13\1\55\1\13\1\213\3\1\14\13\1\150\3\1\4\13\1\142\113\1\1\257"+
    "\1\13\1\265\1\266\1\267\1\270\1\271\1\272\1\273\1\151\1\274\1\151\24\1\55"+
    "\13\1\110\2\1\103\13\1\150\15\13\1\147\150\13\1\16\25\1\41\13\1\147\36\1");

  /* The ZZ_CMAP_A table has 3024 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\1\73\2\3\22\0\1\1\1\55\1\14\1\17\1\42\1\62\1\56\1\15\1\4\1\6"+
    "\1\5\1\60\1\41\1\2\1\40\1\61\12\7\1\54\1\37\1\57\1\53\1\52\1\47\1\51\32\12"+
    "\1\45\1\16\1\46\1\16\1\13\1\0\1\24\1\20\1\63\1\64\1\32\1\34\1\11\1\71\1\65"+
    "\1\11\1\70\1\25\1\66\1\36\1\21\1\33\1\11\1\30\1\26\1\27\1\35\1\23\1\72\1\22"+
    "\1\31\1\67\1\43\1\50\1\44\7\0\1\73\24\0\1\10\12\0\1\10\4\0\1\10\5\0\27\10"+
    "\1\0\12\10\4\0\14\10\16\0\5\10\7\0\1\10\1\0\1\10\1\0\5\10\1\0\2\10\2\0\4\10"+
    "\1\0\1\10\6\0\1\10\1\0\3\10\1\0\1\10\1\0\4\10\1\0\23\10\1\0\13\10\10\0\6\10"+
    "\1\0\26\10\2\0\1\10\6\0\10\10\10\0\13\10\5\0\3\10\33\0\6\10\1\0\1\10\17\0"+
    "\2\10\7\0\2\10\12\0\3\10\2\0\2\10\1\0\16\10\15\0\11\10\13\0\1\10\30\0\6\10"+
    "\4\0\2\10\4\0\1\10\5\0\6\10\4\0\1\10\11\0\1\10\3\0\1\10\7\0\11\10\7\0\5\10"+
    "\1\0\10\10\6\0\26\10\3\0\1\10\2\0\1\10\7\0\11\10\4\0\10\10\2\0\2\10\2\0\26"+
    "\10\1\0\7\10\1\0\1\10\3\0\4\10\3\0\1\10\20\0\1\10\15\0\2\10\1\0\1\10\5\0\6"+
    "\10\4\0\2\10\1\0\2\10\1\0\2\10\1\0\2\10\17\0\4\10\1\0\1\10\3\0\3\10\20\0\11"+
    "\10\1\0\2\10\1\0\2\10\1\0\5\10\3\0\1\10\2\0\1\10\30\0\1\10\13\0\10\10\2\0"+
    "\1\10\3\0\1\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2"+
    "\10\3\0\3\10\3\0\14\10\13\0\10\10\1\0\2\10\10\0\3\10\5\0\1\10\4\0\10\10\1"+
    "\0\6\10\1\0\5\10\3\0\1\10\3\0\2\10\15\0\13\10\2\0\1\10\6\0\3\10\10\0\1\10"+
    "\5\0\22\10\3\0\10\10\1\0\11\10\1\0\1\10\2\0\7\10\11\0\1\10\1\0\2\10\15\0\2"+
    "\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0\1\10\6\0\4\10\1\0\7\10\1\0\3\10\1\0\1\10"+
    "\1\0\1\10\2\0\2\10\1\0\4\10\1\0\2\10\11\0\1\10\2\0\5\10\1\0\1\10\25\0\14\10"+
    "\1\0\24\10\13\0\5\10\22\0\7\10\4\0\4\10\3\0\1\10\3\0\2\10\7\0\3\10\4\0\15"+
    "\10\14\0\1\10\1\0\6\10\1\0\1\10\5\0\1\10\2\0\13\10\1\0\15\10\1\0\4\10\2\0"+
    "\7\10\1\0\1\10\1\0\4\10\2\0\1\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\16"+
    "\10\2\0\6\10\2\0\15\10\2\0\1\10\1\0\10\10\7\0\15\10\1\0\6\10\23\0\1\10\4\0"+
    "\1\10\3\0\5\10\2\0\22\10\1\0\1\10\5\0\17\10\1\0\16\10\2\0\5\10\13\0\14\10"+
    "\13\0\1\10\15\0\7\10\7\0\16\10\15\0\2\10\11\0\4\10\1\0\4\10\3\0\2\10\11\0"+
    "\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\6\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0"+
    "\7\10\3\0\4\10\2\0\6\10\14\0\2\73\7\0\1\10\15\0\1\10\2\0\1\10\4\0\1\10\2\0"+
    "\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0\13\10\2\0"+
    "\4\10\5\0\5\10\4\0\1\10\4\0\2\10\13\0\5\10\6\0\4\10\3\0\2\10\14\0\10\10\7"+
    "\0\10\10\1\0\7\10\6\0\2\10\12\0\5\10\5\0\2\10\3\0\7\10\6\0\3\10\12\0\2\10"+
    "\13\0\11\10\2\0\27\10\2\0\7\10\1\0\3\10\1\0\4\10\1\0\4\10\2\0\6\10\3\0\1\10"+
    "\1\0\1\10\2\0\5\10\1\0\12\10\12\0\5\10\1\0\3\10\1\0\10\10\4\0\7\10\3\0\1\10"+
    "\3\0\2\10\1\0\1\10\3\0\2\10\2\0\5\10\2\0\1\10\1\0\1\10\30\0\3\10\3\0\6\10"+
    "\2\0\6\10\2\0\6\10\11\0\7\10\4\0\5\10\3\0\5\10\5\0\1\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\2\10\1\0\2\10\1\0\12\10\6\0\12\10\2\0\6\10\2\0\6\10\2\0\6\10"+
    "\2\0\3\10\3\0\14\10\1\0\16\10\1\0\2\10\1\0\2\10\1\0\10\10\6\0\4\10\4\0\16"+
    "\10\2\0\1\10\1\0\14\10\1\0\2\10\3\0\1\10\2\0\4\10\1\0\2\10\12\0\10\10\6\0"+
    "\6\10\1\0\3\10\1\0\12\10\3\0\1\10\12\0\4\10\25\0\1\10\1\0\1\10\3\0\7\10\1"+
    "\0\1\10\1\0\4\10\1\0\17\10\1\0\2\10\14\0\3\10\7\0\4\10\11\0\2\10\1\0\1\10"+
    "\20\0\4\10\10\0\1\10\13\0\10\10\5\0\3\10\2\0\1\10\2\0\2\10\2\0\4\10\1\0\14"+
    "\10\1\0\1\10\1\0\7\10\1\0\21\10\1\0\4\10\2\0\10\10\1\0\7\10\1\0\14\10\1\0"+
    "\4\10\1\0\5\10\1\0\1\10\3\0\14\10\2\0\10\10\1\0\2\10\1\0\1\10\2\0\1\10\1\0"+
    "\12\10\1\0\4\10\1\0\1\10\1\0\1\10\6\0\1\10\4\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\2\10\1\0\1\10\2\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2"+
    "\10\1\0\1\10\2\0\4\10\1\0\7\10\1\0\4\10\1\0\4\10\1\0\1\10\1\0\12\10\1\0\5"+
    "\10\1\0\3\10\1\0\5\10\1\0\5\10");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\11\2\1\2\3\12\7\1\12\1\13"+
    "\1\14\1\3\1\15\1\16\1\17\1\20\14\3\4\7"+
    "\1\21\1\22\1\3\1\0\1\23\1\0\1\24\1\0"+
    "\1\25\1\26\2\7\1\27\1\30\1\7\1\31\20\7"+
    "\1\32\1\33\1\34\1\35\1\36\1\3\1\37\1\3"+
    "\1\40\1\3\1\41\4\3\1\42\1\3\1\43\1\44"+
    "\1\45\1\7\1\46\1\47\3\7\1\50\1\0\1\51"+
    "\1\7\1\52\1\53\3\7\1\54\10\7\1\55\1\7"+
    "\1\56\1\7\1\57\6\0\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\4\7\1\67\3\7\1\70\1\7"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\2\7"+
    "\6\0\1\100\4\7\1\101\1\102\2\7\1\103\2\0"+
    "\1\104\1\7\1\105\1\106\1\107\1\110\1\0\1\111"+
    "\1\112\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\74\0\u0168"+
    "\0\u01a4\0\u01e0\0\74\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\74\0\74\0\74\0\u0564\0\74\0\74\0\74"+
    "\0\74\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708"+
    "\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8"+
    "\0\u0924\0\74\0\u0960\0\u099c\0\u09d8\0\74\0\u021c\0\u0a14"+
    "\0\u0258\0\u0a50\0\74\0\u0a8c\0\u0ac8\0\u01a4\0\u01a4\0\u0b04"+
    "\0\u01a4\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88"+
    "\0\u0ec4\0\u01a4\0\74\0\74\0\74\0\74\0\u0f00\0\74"+
    "\0\u0f3c\0\74\0\u0f78\0\74\0\u0fb4\0\u0ff0\0\u102c\0\u1068"+
    "\0\74\0\u10a4\0\74\0\74\0\74\0\u10e0\0\u01a4\0\u01a4"+
    "\0\u111c\0\u1158\0\u1194\0\74\0\u11d0\0\u01a4\0\u120c\0\u01a4"+
    "\0\u01a4\0\u1248\0\u1284\0\u12c0\0\u01a4\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u01a4\0\u14dc\0\u01a4"+
    "\0\u1518\0\u01a4\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\74\0\u16bc"+
    "\0\u16f8\0\u1734\0\u1770\0\74\0\u17ac\0\u17e8\0\u1824\0\u01a4"+
    "\0\u1860\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4"+
    "\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40"+
    "\0\u01a4\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u01a4\0\u01a4\0\u1b6c"+
    "\0\u1ba8\0\u01a4\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u01a4\0\u01a4"+
    "\0\u01a4\0\u01a4\0\u1cd4\0\u01a4\0\u01a4\0\u01a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\11\1\22\1\23\1\24\1\25\1\26"+
    "\2\11\1\27\1\30\1\31\2\11\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\4\11\1\61\76\0\1\3"+
    "\1\0\1\3\70\0\2\62\1\63\2\62\1\16\10\62"+
    "\2\16\22\62\1\16\4\62\3\16\1\64\10\16\11\62"+
    "\5\0\1\65\66\0\2\66\1\16\2\66\1\16\10\66"+
    "\2\16\22\66\1\16\4\66\14\16\11\66\7\0\1\10"+
    "\73\0\5\11\4\0\17\11\24\0\10\11\10\0\5\12"+
    "\4\0\17\12\24\0\10\12\1\0\14\67\1\70\57\67"+
    "\15\71\1\72\56\71\2\0\1\16\2\0\1\16\10\0"+
    "\2\16\22\0\1\16\4\0\14\16\11\0\2\73\1\16"+
    "\2\73\1\16\10\73\2\16\22\73\1\16\4\73\14\16"+
    "\11\73\7\0\5\11\4\0\1\11\1\74\10\11\1\75"+
    "\4\11\24\0\10\11\10\0\5\11\4\0\14\11\1\76"+
    "\2\11\24\0\1\11\1\77\6\11\10\0\5\11\4\0"+
    "\4\11\1\100\12\11\24\0\10\11\10\0\5\11\4\0"+
    "\7\11\1\101\1\102\3\11\1\103\2\11\24\0\10\11"+
    "\10\0\5\11\4\0\4\11\1\104\12\11\24\0\10\11"+
    "\10\0\5\11\4\0\7\11\1\105\1\11\1\106\1\107"+
    "\4\11\24\0\5\11\1\110\2\11\10\0\5\11\4\0"+
    "\10\11\1\111\6\11\24\0\6\11\1\112\1\11\10\0"+
    "\5\11\4\0\5\11\1\113\1\114\1\115\7\11\24\0"+
    "\10\11\10\0\5\11\4\0\15\11\1\116\1\11\24\0"+
    "\10\11\10\0\5\11\4\0\1\11\1\117\2\11\1\120"+
    "\10\11\1\121\1\11\24\0\2\11\1\122\5\11\3\0"+
    "\1\16\1\0\1\123\1\16\10\0\2\16\22\0\1\16"+
    "\4\0\14\16\11\0\2\124\1\16\2\124\1\16\10\124"+
    "\2\16\22\124\1\16\4\124\14\16\11\124\2\125\1\16"+
    "\2\125\1\16\10\125\2\16\22\125\1\16\4\125\14\16"+
    "\11\125\2\126\1\16\2\126\1\16\10\126\1\16\1\127"+
    "\22\126\1\16\4\126\14\16\11\126\2\130\1\16\2\130"+
    "\1\16\10\130\2\16\22\130\1\16\4\130\4\16\1\131"+
    "\7\16\11\130\2\132\1\16\2\132\1\16\10\132\2\16"+
    "\22\132\1\16\4\132\4\16\1\133\7\16\11\132\2\134"+
    "\1\16\2\134\1\16\10\134\2\16\22\134\1\16\4\134"+
    "\4\16\1\135\7\16\11\134\2\0\1\16\2\0\1\16"+
    "\10\0\2\16\22\0\1\16\4\0\4\16\1\136\1\16"+
    "\1\137\5\16\13\0\1\16\2\0\1\16\10\0\2\16"+
    "\22\0\1\16\4\0\7\16\1\140\4\16\11\0\2\141"+
    "\1\16\2\141\1\16\10\141\2\16\22\141\1\16\4\141"+
    "\4\16\1\142\7\16\11\141\2\143\1\16\2\143\1\16"+
    "\10\143\2\16\22\143\1\16\4\143\14\16\11\143\2\144"+
    "\1\16\2\144\1\16\10\144\2\16\22\144\1\16\4\144"+
    "\14\16\11\144\2\145\1\16\2\145\1\16\10\145\2\16"+
    "\22\145\1\16\4\145\14\16\11\145\7\0\5\11\4\0"+
    "\4\11\1\146\12\11\24\0\10\11\10\0\5\11\4\0"+
    "\1\11\1\147\15\11\24\0\10\11\10\0\5\11\4\0"+
    "\14\11\1\150\1\11\1\151\24\0\3\11\1\152\4\11"+
    "\10\0\5\11\4\0\17\11\24\0\6\11\1\153\1\11"+
    "\1\0\3\63\1\0\70\63\2\154\1\16\2\154\1\16"+
    "\10\154\2\16\22\154\1\16\4\154\14\16\11\154\5\65"+
    "\1\155\66\65\14\0\1\67\74\0\1\71\65\0\5\11"+
    "\4\0\2\11\1\156\14\11\24\0\10\11\10\0\5\11"+
    "\4\0\14\11\1\157\2\11\24\0\10\11\10\0\5\11"+
    "\4\0\5\11\1\160\2\11\1\161\6\11\24\0\10\11"+
    "\10\0\5\11\4\0\10\11\1\162\6\11\24\0\10\11"+
    "\10\0\5\11\4\0\7\11\1\163\7\11\24\0\10\11"+
    "\10\0\5\11\4\0\17\11\24\0\4\11\1\164\3\11"+
    "\10\0\5\11\4\0\10\11\1\165\6\11\24\0\10\11"+
    "\10\0\5\11\4\0\16\11\1\166\24\0\10\11\10\0"+
    "\5\11\4\0\2\11\1\167\14\11\24\0\10\11\10\0"+
    "\5\11\4\0\17\11\24\0\2\11\1\170\5\11\10\0"+
    "\5\11\4\0\15\11\1\171\1\11\24\0\10\11\10\0"+
    "\5\11\4\0\12\11\1\172\4\11\24\0\10\11\10\0"+
    "\5\11\4\0\6\11\1\173\10\11\24\0\2\11\1\174"+
    "\5\11\10\0\5\11\4\0\4\11\1\175\12\11\24\0"+
    "\10\11\10\0\5\11\4\0\4\11\1\176\12\11\24\0"+
    "\10\11\10\0\5\11\4\0\1\177\16\11\24\0\10\11"+
    "\10\0\5\11\4\0\10\11\1\200\6\11\24\0\10\11"+
    "\10\0\5\11\4\0\5\11\1\201\11\11\24\0\10\11"+
    "\10\0\5\11\4\0\16\11\1\202\24\0\10\11\2\0"+
    "\1\203\1\16\1\203\1\0\1\16\10\0\2\16\1\204"+
    "\2\0\1\205\1\206\1\0\1\207\5\0\1\210\5\0"+
    "\1\16\4\0\14\16\11\0\2\211\1\16\2\211\1\16"+
    "\10\211\2\16\22\211\1\16\4\211\14\16\11\211\2\212"+
    "\1\16\2\212\1\16\10\212\2\16\22\212\1\16\4\212"+
    "\14\16\11\212\2\213\1\16\2\213\1\16\10\213\2\16"+
    "\22\213\1\16\4\213\14\16\11\213\2\214\1\16\2\214"+
    "\1\16\10\214\2\16\22\214\1\16\4\214\14\16\11\214"+
    "\2\215\1\16\2\215\1\16\10\215\2\16\22\215\1\16"+
    "\4\215\14\16\11\215\2\216\1\16\2\216\1\16\10\216"+
    "\2\16\22\216\1\16\4\216\14\16\11\216\2\217\1\16"+
    "\2\217\1\16\10\217\2\16\22\217\1\16\4\217\14\16"+
    "\11\217\7\0\5\11\4\0\6\11\1\220\10\11\24\0"+
    "\10\11\10\0\5\11\4\0\14\11\1\221\2\11\24\0"+
    "\10\11\10\0\5\11\4\0\13\11\1\222\3\11\24\0"+
    "\10\11\10\0\5\11\4\0\17\11\24\0\2\11\1\223"+
    "\5\11\1\0\5\65\1\155\1\224\65\65\7\0\5\11"+
    "\4\0\1\11\1\225\15\11\24\0\10\11\10\0\5\11"+
    "\4\0\4\11\1\226\12\11\24\0\10\11\10\0\5\11"+
    "\4\0\12\11\1\227\4\11\24\0\10\11\10\0\5\11"+
    "\4\0\11\11\1\230\5\11\24\0\10\11\10\0\5\11"+
    "\4\0\7\11\1\231\7\11\24\0\10\11\10\0\5\11"+
    "\4\0\13\11\1\232\3\11\24\0\10\11\10\0\5\11"+
    "\4\0\13\11\1\233\3\11\24\0\10\11\10\0\5\11"+
    "\4\0\12\11\1\234\4\11\24\0\10\11\10\0\5\11"+
    "\4\0\16\11\1\235\24\0\10\11\10\0\5\11\4\0"+
    "\12\11\1\236\4\11\24\0\10\11\10\0\5\11\4\0"+
    "\14\11\1\237\2\11\24\0\10\11\10\0\5\11\4\0"+
    "\17\11\24\0\1\240\7\11\10\0\5\11\4\0\5\11"+
    "\1\241\11\11\24\0\10\11\10\0\5\11\4\0\6\11"+
    "\1\242\10\11\24\0\10\11\2\0\1\203\1\0\1\203"+
    "\14\0\1\204\2\0\1\205\1\206\1\0\1\207\5\0"+
    "\1\210\60\0\1\243\76\0\1\244\77\0\1\245\72\0"+
    "\1\246\2\0\1\247\76\0\1\250\45\0\5\11\4\0"+
    "\12\11\1\251\4\11\24\0\10\11\10\0\5\11\4\0"+
    "\17\11\24\0\2\11\1\252\5\11\10\0\5\11\4\0"+
    "\1\11\1\253\15\11\24\0\10\11\10\0\5\11\4\0"+
    "\5\11\1\254\11\11\24\0\10\11\10\0\5\11\4\0"+
    "\10\11\1\255\6\11\24\0\10\11\10\0\5\11\4\0"+
    "\11\11\1\256\5\11\24\0\10\11\10\0\5\11\4\0"+
    "\10\11\1\257\6\11\24\0\10\11\10\0\5\11\4\0"+
    "\4\11\1\260\12\11\24\0\10\11\10\0\5\11\4\0"+
    "\17\11\24\0\2\11\1\261\5\11\10\0\5\11\4\0"+
    "\12\11\1\262\4\11\24\0\10\11\23\0\1\126\76\0"+
    "\1\126\76\0\1\263\73\0\1\126\65\0\1\264\107\0"+
    "\1\126\44\0\5\11\4\0\2\11\1\265\14\11\24\0"+
    "\10\11\10\0\5\11\4\0\10\11\1\266\6\11\24\0"+
    "\10\11\10\0\5\11\4\0\12\11\1\267\4\11\24\0"+
    "\10\11\10\0\5\11\4\0\12\11\1\270\4\11\24\0"+
    "\10\11\10\0\5\11\4\0\2\11\1\271\14\11\24\0"+
    "\10\11\10\0\5\11\4\0\17\11\24\0\1\272\7\11"+
    "\25\0\1\273\102\0\1\126\47\0\5\11\4\0\5\11"+
    "\1\274\2\11\1\275\6\11\24\0\10\11\10\0\5\11"+
    "\4\0\7\11\1\276\7\11\24\0\10\11\32\0\1\126"+
    "\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\3\1\1\11\16\1\3\11"+
    "\1\1\4\11\20\1\1\11\2\1\1\0\1\11\1\0"+
    "\1\1\1\0\1\1\1\11\27\1\4\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\4\1\1\11\1\1\3\11"+
    "\6\1\1\11\1\0\25\1\6\0\7\11\4\1\1\11"+
    "\16\1\6\0\12\1\2\0\6\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _LamaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 76: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 77: break;
          case 3: 
            { return LAMA_INFIX_OP;
            } 
            // fall through
          case 78: break;
          case 4: 
            { return LAMA_LPAR;
            } 
            // fall through
          case 79: break;
          case 5: 
            { return LAMA_RPAR;
            } 
            // fall through
          case 80: break;
          case 6: 
            { return LAMA_NUMBER;
            } 
            // fall through
          case 81: break;
          case 7: 
            { return LAMA_LINDENT;
            } 
            // fall through
          case 82: break;
          case 8: 
            { return LAMA_UINDENT;
            } 
            // fall through
          case 83: break;
          case 9: 
            { return LAMA_BOTTOM;
            } 
            // fall through
          case 84: break;
          case 10: 
            { return LAMA_SEMI;
            } 
            // fall through
          case 85: break;
          case 11: 
            { return LAMA_DOT;
            } 
            // fall through
          case 86: break;
          case 12: 
            { return LAMA_COMMA;
            } 
            // fall through
          case 87: break;
          case 13: 
            { return LAMA_LBRACE;
            } 
            // fall through
          case 88: break;
          case 14: 
            { return LAMA_RBRACE;
            } 
            // fall through
          case 89: break;
          case 15: 
            { return LAMA_LBRACKET;
            } 
            // fall through
          case 90: break;
          case 16: 
            { return LAMA_RBRACKET;
            } 
            // fall through
          case 91: break;
          case 17: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LAMA_MINUS;
            } 
            // fall through
          case 92: break;
          case 18: 
            { return END_OF_LINE_COMMENT;
            } 
            // fall through
          case 93: break;
          case 19: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LAMA_MUL;
            } 
            // fall through
          case 94: break;
          case 20: 
            { return LAMA_STRING;
            } 
            // fall through
          case 95: break;
          case 21: 
            { return LAMA_CHAR;
            } 
            // fall through
          case 96: break;
          case 22: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LAMA_SHARP;
            } 
            // fall through
          case 97: break;
          case 23: 
            { return LAMA_OF;
            } 
            // fall through
          case 98: break;
          case 24: 
            { return LAMA_OD;
            } 
            // fall through
          case 99: break;
          case 25: 
            { return LAMA_AT;
            } 
            // fall through
          case 100: break;
          case 26: 
            { return LAMA_FI;
            } 
            // fall through
          case 101: break;
          case 27: 
            { return LAMA_DOLLAR_LPAR;
            } 
            // fall through
          case 102: break;
          case 28: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LAMA_QUEST;
            } 
            // fall through
          case 103: break;
          case 29: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LAMA_CASE_OR;
            } 
            // fall through
          case 104: break;
          case 30: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LAMA_AT_SIGN;
            } 
            // fall through
          case 105: break;
          case 31: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LAMA_GE;
            } 
            // fall through
          case 106: break;
          case 32: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LAMA_EQ;
            } 
            // fall through
          case 107: break;
          case 33: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LAMA_LIST_CONS;
            } 
            // fall through
          case 108: break;
          case 34: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LAMA_LE;
            } 
            // fall through
          case 109: break;
          case 35: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LAMA_PLUS;
            } 
            // fall through
          case 110: break;
          case 36: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LAMA_DIV;
            } 
            // fall through
          case 111: break;
          case 37: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LAMA_MOD;
            } 
            // fall through
          case 112: break;
          case 38: 
            { return LAMA_DO;
            } 
            // fall through
          case 113: break;
          case 39: 
            { return LAMA_IF;
            } 
            // fall through
          case 114: break;
          case 40: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return LAMA_ARROW;
            } 
            // fall through
          case 115: break;
          case 41: 
            { return LAMA_BOX;
            } 
            // fall through
          case 116: break;
          case 42: 
            { return LAMA_VAL;
            } 
            // fall through
          case 117: break;
          case 43: 
            { return LAMA_VAR;
            } 
            // fall through
          case 118: break;
          case 44: 
            { return LAMA_STR;
            } 
            // fall through
          case 119: break;
          case 45: 
            { return LAMA_ETA;
            } 
            // fall through
          case 120: break;
          case 46: 
            { return LAMA_FOR;
            } 
            // fall through
          case 121: break;
          case 47: 
            { return LAMA_FUN;
            } 
            // fall through
          case 122: break;
          case 48: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return LAMA_GEQ;
            } 
            // fall through
          case 123: break;
          case 49: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return LAMA_EQEQ;
            } 
            // fall through
          case 124: break;
          case 50: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return LAMA_ASSIGN;
            } 
            // fall through
          case 125: break;
          case 51: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return LAMA_NEQ;
            } 
            // fall through
          case 126: break;
          case 52: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return LAMA_OR;
            } 
            // fall through
          case 127: break;
          case 53: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return LAMA_AND;
            } 
            // fall through
          case 128: break;
          case 54: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return LAMA_LEQ;
            } 
            // fall through
          case 129: break;
          case 55: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 130: break;
          case 56: 
            { return LAMA_LAZY;
            } 
            // fall through
          case 131: break;
          case 57: 
            { return LAMA_SEXP;
            } 
            // fall through
          case 132: break;
          case 58: 
            { return LAMA_SKIP;
            } 
            // fall through
          case 133: break;
          case 59: 
            { return LAMA_TRUE;
            } 
            // fall through
          case 134: break;
          case 60: 
            { return LAMA_THEN;
            } 
            // fall through
          case 135: break;
          case 61: 
            { return LAMA_ELSE;
            } 
            // fall through
          case 136: break;
          case 62: 
            { return LAMA_ELIF;
            } 
            // fall through
          case 137: break;
          case 63: 
            { return LAMA_ESAC;
            } 
            // fall through
          case 138: break;
          case 64: 
            { return LAMA_CASE;
            } 
            // fall through
          case 139: break;
          case 65: 
            { return LAMA_ARRAY;
            } 
            // fall through
          case 140: break;
          case 66: 
            { return LAMA_AFTER;
            } 
            // fall through
          case 141: break;
          case 67: 
            { return LAMA_FALSE;
            } 
            // fall through
          case 142: break;
          case 68: 
            { return LAMA_INFIX;
            } 
            // fall through
          case 143: break;
          case 69: 
            { return LAMA_WHILE;
            } 
            // fall through
          case 144: break;
          case 70: 
            { return LAMA_BEFORE;
            } 
            // fall through
          case 145: break;
          case 71: 
            { return LAMA_SYNTAX;
            } 
            // fall through
          case 146: break;
          case 72: 
            { return LAMA_PUBLIC;
            } 
            // fall through
          case 147: break;
          case 73: 
            { return LAMA_INFIXL;
            } 
            // fall through
          case 148: break;
          case 74: 
            { return LAMA_INFIXR;
            } 
            // fall through
          case 149: break;
          case 75: 
            { return LAMA_IMPORT;
            } 
            // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
